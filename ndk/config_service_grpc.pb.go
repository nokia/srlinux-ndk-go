//*********************************************************************************************************************
//  Description: interface between router agents and SDK service manager
//
//  Copyright (c) 2018 Nokia
//*********************************************************************************************************************

// NDK Version: v0.4.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: ndk/config_service.proto

package ndk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SdkMgrConfigService_AcknowledgeConfig_FullMethodName = "/srlinux.sdk.SdkMgrConfigService/AcknowledgeConfig"
)

// SdkMgrConfigServiceClient is the client API for SdkMgrConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkMgrConfigServiceClient interface {
	// Acknowledge received configuration.
	// When agent is registered with `wait_config_ack` flag set to true,
	// it needs to acknowledge received configuration.
	AcknowledgeConfig(ctx context.Context, in *AcknowledgeConfigRequest, opts ...grpc.CallOption) (*AcknowledgeConfigResponse, error)
}

type sdkMgrConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkMgrConfigServiceClient(cc grpc.ClientConnInterface) SdkMgrConfigServiceClient {
	return &sdkMgrConfigServiceClient{cc}
}

func (c *sdkMgrConfigServiceClient) AcknowledgeConfig(ctx context.Context, in *AcknowledgeConfigRequest, opts ...grpc.CallOption) (*AcknowledgeConfigResponse, error) {
	out := new(AcknowledgeConfigResponse)
	err := c.cc.Invoke(ctx, SdkMgrConfigService_AcknowledgeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkMgrConfigServiceServer is the server API for SdkMgrConfigService service.
// All implementations should embed UnimplementedSdkMgrConfigServiceServer
// for forward compatibility
type SdkMgrConfigServiceServer interface {
	// Acknowledge received configuration.
	// When agent is registered with `wait_config_ack` flag set to true,
	// it needs to acknowledge received configuration.
	AcknowledgeConfig(context.Context, *AcknowledgeConfigRequest) (*AcknowledgeConfigResponse, error)
}

// UnimplementedSdkMgrConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSdkMgrConfigServiceServer struct {
}

func (UnimplementedSdkMgrConfigServiceServer) AcknowledgeConfig(context.Context, *AcknowledgeConfigRequest) (*AcknowledgeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeConfig not implemented")
}

// UnsafeSdkMgrConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdkMgrConfigServiceServer will
// result in compilation errors.
type UnsafeSdkMgrConfigServiceServer interface {
	mustEmbedUnimplementedSdkMgrConfigServiceServer()
}

func RegisterSdkMgrConfigServiceServer(s grpc.ServiceRegistrar, srv SdkMgrConfigServiceServer) {
	s.RegisterService(&SdkMgrConfigService_ServiceDesc, srv)
}

func _SdkMgrConfigService_AcknowledgeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkMgrConfigServiceServer).AcknowledgeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SdkMgrConfigService_AcknowledgeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkMgrConfigServiceServer).AcknowledgeConfig(ctx, req.(*AcknowledgeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SdkMgrConfigService_ServiceDesc is the grpc.ServiceDesc for SdkMgrConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SdkMgrConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "srlinux.sdk.SdkMgrConfigService",
	HandlerType: (*SdkMgrConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcknowledgeConfig",
			Handler:    _SdkMgrConfigService_AcknowledgeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ndk/config_service.proto",
}
