//*********************************************************************************************************************
//  Description: interface between router agents and SDK service manager
//
//  Copyright (c) 2018 Nokia
//********************************************************************************************************************

// NDK Version: v0.5.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: ndk/lldp_service.proto

package ndk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents chassis type.
type LldpNeighborKey_ChassisIdType int32

const (
	LldpNeighborKey_CHASSIS_ID_TYPE_RESERVED          LldpNeighborKey_ChassisIdType = 0 // Reserved for future use
	LldpNeighborKey_CHASSIS_ID_TYPE_CHASSIS_COMPONENT LldpNeighborKey_ChassisIdType = 1 // Chassis identifier based on a locally defined chassis component
	LldpNeighborKey_CHASSIS_ID_TYPE_INTERFACE_ALIAS   LldpNeighborKey_ChassisIdType = 2 // Alias of the interface
	LldpNeighborKey_CHASSIS_ID_TYPE_PORT_COMPONENT    LldpNeighborKey_ChassisIdType = 3 // Chassis identifier based on a locally defined port component
	LldpNeighborKey_CHASSIS_ID_TYPE_MAC_ADDRESS       LldpNeighborKey_ChassisIdType = 4 // MAC address
	LldpNeighborKey_CHASSIS_ID_TYPE_NETWORK_ADDRESS   LldpNeighborKey_ChassisIdType = 5 // Network address
	LldpNeighborKey_CHASSIS_ID_TYPE_INTERFACE_NAME    LldpNeighborKey_ChassisIdType = 6 // Name of the interface
	LldpNeighborKey_CHASSIS_ID_TYPE_LOCALLY_ASSIGNED  LldpNeighborKey_ChassisIdType = 7 // Chassis identifier based on a locally defined value
)

// Enum value maps for LldpNeighborKey_ChassisIdType.
var (
	LldpNeighborKey_ChassisIdType_name = map[int32]string{
		0: "CHASSIS_ID_TYPE_RESERVED",
		1: "CHASSIS_ID_TYPE_CHASSIS_COMPONENT",
		2: "CHASSIS_ID_TYPE_INTERFACE_ALIAS",
		3: "CHASSIS_ID_TYPE_PORT_COMPONENT",
		4: "CHASSIS_ID_TYPE_MAC_ADDRESS",
		5: "CHASSIS_ID_TYPE_NETWORK_ADDRESS",
		6: "CHASSIS_ID_TYPE_INTERFACE_NAME",
		7: "CHASSIS_ID_TYPE_LOCALLY_ASSIGNED",
	}
	LldpNeighborKey_ChassisIdType_value = map[string]int32{
		"CHASSIS_ID_TYPE_RESERVED":          0,
		"CHASSIS_ID_TYPE_CHASSIS_COMPONENT": 1,
		"CHASSIS_ID_TYPE_INTERFACE_ALIAS":   2,
		"CHASSIS_ID_TYPE_PORT_COMPONENT":    3,
		"CHASSIS_ID_TYPE_MAC_ADDRESS":       4,
		"CHASSIS_ID_TYPE_NETWORK_ADDRESS":   5,
		"CHASSIS_ID_TYPE_INTERFACE_NAME":    6,
		"CHASSIS_ID_TYPE_LOCALLY_ASSIGNED":  7,
	}
)

func (x LldpNeighborKey_ChassisIdType) Enum() *LldpNeighborKey_ChassisIdType {
	p := new(LldpNeighborKey_ChassisIdType)
	*p = x
	return p
}

func (x LldpNeighborKey_ChassisIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpNeighborKey_ChassisIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_lldp_service_proto_enumTypes[0].Descriptor()
}

func (LldpNeighborKey_ChassisIdType) Type() protoreflect.EnumType {
	return &file_ndk_lldp_service_proto_enumTypes[0]
}

func (x LldpNeighborKey_ChassisIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpNeighborKey_ChassisIdType.Descriptor instead.
func (LldpNeighborKey_ChassisIdType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_lldp_service_proto_rawDescGZIP(), []int{1, 0}
}

// Represents port subtype.
type LldpNeighborData_PortSubType int32

const (
	LldpNeighborData_PORT_SUB_TYPE_RESERVED         LldpNeighborData_PortSubType = 0 // Reserved for future use
	LldpNeighborData_PORT_SUB_TYPE_INTERFACE_ALIAS  LldpNeighborData_PortSubType = 1 // Alias of the interface
	LldpNeighborData_PORT_SUB_TYPE_PORT_COMPONENT   LldpNeighborData_PortSubType = 2 // Port identifier based on a locally defined port component
	LldpNeighborData_PORT_SUB_TYPE_MAC_ADDRESS      LldpNeighborData_PortSubType = 3 // MAC address
	LldpNeighborData_PORT_SUB_TYPE_NETWORK_ADDRESS  LldpNeighborData_PortSubType = 4 // Network address
	LldpNeighborData_PORT_SUB_TYPE_INTERFACE_NAME   LldpNeighborData_PortSubType = 5 // Name of the interface
	LldpNeighborData_PORT_SUB_TYPE_AGENT_CIRCUIT_ID LldpNeighborData_PortSubType = 6 // Port identifier based on the circuit ID in the DHCP relay agent information option
	LldpNeighborData_PORT_SUB_TYPE_LOCALLY_ASSIGNED LldpNeighborData_PortSubType = 7 // Port identifier based on a locally defined alphanumeric string
)

// Enum value maps for LldpNeighborData_PortSubType.
var (
	LldpNeighborData_PortSubType_name = map[int32]string{
		0: "PORT_SUB_TYPE_RESERVED",
		1: "PORT_SUB_TYPE_INTERFACE_ALIAS",
		2: "PORT_SUB_TYPE_PORT_COMPONENT",
		3: "PORT_SUB_TYPE_MAC_ADDRESS",
		4: "PORT_SUB_TYPE_NETWORK_ADDRESS",
		5: "PORT_SUB_TYPE_INTERFACE_NAME",
		6: "PORT_SUB_TYPE_AGENT_CIRCUIT_ID",
		7: "PORT_SUB_TYPE_LOCALLY_ASSIGNED",
	}
	LldpNeighborData_PortSubType_value = map[string]int32{
		"PORT_SUB_TYPE_RESERVED":         0,
		"PORT_SUB_TYPE_INTERFACE_ALIAS":  1,
		"PORT_SUB_TYPE_PORT_COMPONENT":   2,
		"PORT_SUB_TYPE_MAC_ADDRESS":      3,
		"PORT_SUB_TYPE_NETWORK_ADDRESS":  4,
		"PORT_SUB_TYPE_INTERFACE_NAME":   5,
		"PORT_SUB_TYPE_AGENT_CIRCUIT_ID": 6,
		"PORT_SUB_TYPE_LOCALLY_ASSIGNED": 7,
	}
)

func (x LldpNeighborData_PortSubType) Enum() *LldpNeighborData_PortSubType {
	p := new(LldpNeighborData_PortSubType)
	*p = x
	return p
}

func (x LldpNeighborData_PortSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpNeighborData_PortSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_lldp_service_proto_enumTypes[1].Descriptor()
}

func (LldpNeighborData_PortSubType) Type() protoreflect.EnumType {
	return &file_ndk_lldp_service_proto_enumTypes[1]
}

func (x LldpNeighborData_PortSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpNeighborData_PortSubType.Descriptor instead.
func (LldpNeighborData_PortSubType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_lldp_service_proto_rawDescGZIP(), []int{2, 0}
}

// *
// Represents LLDP neighbor subscription request.
type LldpNeighborSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *LldpNeighborKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // Optional, to filter on name
}

func (x *LldpNeighborSubscriptionRequest) Reset() {
	*x = LldpNeighborSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_lldp_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborSubscriptionRequest) ProtoMessage() {}

func (x *LldpNeighborSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_lldp_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*LldpNeighborSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_ndk_lldp_service_proto_rawDescGZIP(), []int{0}
}

func (x *LldpNeighborSubscriptionRequest) GetKey() *LldpNeighborKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// *
// Represents LLDP neighbor key.
type LldpNeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string                        `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`                                           // Local interface name
	ChassisId     string                        `protobuf:"bytes,2,opt,name=chassis_id,json=chassisId,proto3" json:"chassis_id,omitempty"`                                                       // Chassis identifier
	ChassisType   LldpNeighborKey_ChassisIdType `protobuf:"varint,3,opt,name=chassis_type,json=chassisType,proto3,enum=srlinux.sdk.LldpNeighborKey_ChassisIdType" json:"chassis_type,omitempty"` // Chassis type
}

func (x *LldpNeighborKey) Reset() {
	*x = LldpNeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_lldp_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborKey) ProtoMessage() {}

func (x *LldpNeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_lldp_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborKey.ProtoReflect.Descriptor instead.
func (*LldpNeighborKey) Descriptor() ([]byte, []int) {
	return file_ndk_lldp_service_proto_rawDescGZIP(), []int{1}
}

func (x *LldpNeighborKey) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *LldpNeighborKey) GetChassisId() string {
	if x != nil {
		return x.ChassisId
	}
	return ""
}

func (x *LldpNeighborKey) GetChassisType() LldpNeighborKey_ChassisIdType {
	if x != nil {
		return x.ChassisType
	}
	return LldpNeighborKey_CHASSIS_ID_TYPE_RESERVED
}

// *
// Represents LLDP neighbor data.
type LldpNeighborData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId            string                       `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`                                                      // Port identifier
	PortType          LldpNeighborData_PortSubType `protobuf:"varint,2,opt,name=port_type,json=portType,proto3,enum=srlinux.sdk.LldpNeighborData_PortSubType" json:"port_type,omitempty"` // Port type
	SourceMac         *MacAddressPb                `protobuf:"bytes,3,opt,name=source_mac,json=sourceMac,proto3" json:"source_mac,omitempty"`                                             // Port MAC address
	BgpPeerAddresses  []*IpAddressPb               `protobuf:"bytes,4,rep,name=bgp_peer_addresses,json=bgpPeerAddresses,proto3" json:"bgp_peer_addresses,omitempty"`                      // LLDP BGP autodiscovered addresses
	BgpGroupId        uint32                       `protobuf:"varint,5,opt,name=bgp_group_id,json=bgpGroupId,proto3" json:"bgp_group_id,omitempty"`                                       // BGP group identifier
	SystemName        string                       `protobuf:"bytes,6,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`                                          // System name
	SystemDescription string                       `protobuf:"bytes,7,opt,name=system_description,json=systemDescription,proto3" json:"system_description,omitempty"`                     // System description
}

func (x *LldpNeighborData) Reset() {
	*x = LldpNeighborData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_lldp_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborData) ProtoMessage() {}

func (x *LldpNeighborData) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_lldp_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborData.ProtoReflect.Descriptor instead.
func (*LldpNeighborData) Descriptor() ([]byte, []int) {
	return file_ndk_lldp_service_proto_rawDescGZIP(), []int{2}
}

func (x *LldpNeighborData) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *LldpNeighborData) GetPortType() LldpNeighborData_PortSubType {
	if x != nil {
		return x.PortType
	}
	return LldpNeighborData_PORT_SUB_TYPE_RESERVED
}

func (x *LldpNeighborData) GetSourceMac() *MacAddressPb {
	if x != nil {
		return x.SourceMac
	}
	return nil
}

func (x *LldpNeighborData) GetBgpPeerAddresses() []*IpAddressPb {
	if x != nil {
		return x.BgpPeerAddresses
	}
	return nil
}

func (x *LldpNeighborData) GetBgpGroupId() uint32 {
	if x != nil {
		return x.BgpGroupId
	}
	return 0
}

func (x *LldpNeighborData) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *LldpNeighborData) GetSystemDescription() string {
	if x != nil {
		return x.SystemDescription
	}
	return ""
}

// *
// Represents LLDP neighbor notification.
type LldpNeighborNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op   SdkMgrOperation   `protobuf:"varint,1,opt,name=op,proto3,enum=srlinux.sdk.SdkMgrOperation" json:"op,omitempty"` // Operation such as create, delete, or update
	Key  *LldpNeighborKey  `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                                 // LLDP neighbor key
	Data *LldpNeighborData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                               // LLDP neighbor data
}

func (x *LldpNeighborNotification) Reset() {
	*x = LldpNeighborNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_lldp_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborNotification) ProtoMessage() {}

func (x *LldpNeighborNotification) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_lldp_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborNotification.ProtoReflect.Descriptor instead.
func (*LldpNeighborNotification) Descriptor() ([]byte, []int) {
	return file_ndk_lldp_service_proto_rawDescGZIP(), []int{3}
}

func (x *LldpNeighborNotification) GetOp() SdkMgrOperation {
	if x != nil {
		return x.Op
	}
	return SdkMgrOperation_SDK_MGR_OPERATION_CREATE
}

func (x *LldpNeighborNotification) GetKey() *LldpNeighborKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *LldpNeighborNotification) GetData() *LldpNeighborData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_ndk_lldp_service_proto protoreflect.FileDescriptor

var file_ndk_lldp_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6e, 0x64, 0x6b, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x2e, 0x73, 0x64, 0x6b, 0x1a, 0x14, 0x6e, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x1f, 0x4c,
	0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x72,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xd6,
	0x03, 0x0a, 0x0f, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6c, 0x64,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x2e, 0x43, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41,
	0x53, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48, 0x41, 0x53, 0x53,
	0x49, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53,
	0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41,
	0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x48, 0x41, 0x53, 0x53,
	0x49, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x48, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x06, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x07, 0x22, 0x84, 0x05, 0x0a, 0x10, 0x4c, 0x6c, 0x64, 0x70,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x62, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x46, 0x0a, 0x12, 0x62, 0x67, 0x70, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x62, 0x52, 0x10, 0x62,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x62, 0x67, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x67, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x49,
	0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x07, 0x22, 0xab,
	0x01, 0x0a, 0x18, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x64, 0x6b, 0x4d, 0x67, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x25, 0x5a, 0x23,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x6b, 0x69, 0x61,
	0x2f, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2d, 0x6e, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x6e, 0x64, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ndk_lldp_service_proto_rawDescOnce sync.Once
	file_ndk_lldp_service_proto_rawDescData = file_ndk_lldp_service_proto_rawDesc
)

func file_ndk_lldp_service_proto_rawDescGZIP() []byte {
	file_ndk_lldp_service_proto_rawDescOnce.Do(func() {
		file_ndk_lldp_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_ndk_lldp_service_proto_rawDescData)
	})
	return file_ndk_lldp_service_proto_rawDescData
}

var file_ndk_lldp_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ndk_lldp_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ndk_lldp_service_proto_goTypes = []interface{}{
	(LldpNeighborKey_ChassisIdType)(0),      // 0: srlinux.sdk.LldpNeighborKey.ChassisIdType
	(LldpNeighborData_PortSubType)(0),       // 1: srlinux.sdk.LldpNeighborData.PortSubType
	(*LldpNeighborSubscriptionRequest)(nil), // 2: srlinux.sdk.LldpNeighborSubscriptionRequest
	(*LldpNeighborKey)(nil),                 // 3: srlinux.sdk.LldpNeighborKey
	(*LldpNeighborData)(nil),                // 4: srlinux.sdk.LldpNeighborData
	(*LldpNeighborNotification)(nil),        // 5: srlinux.sdk.LldpNeighborNotification
	(*MacAddressPb)(nil),                    // 6: srlinux.sdk.MacAddressPb
	(*IpAddressPb)(nil),                     // 7: srlinux.sdk.IpAddressPb
	(SdkMgrOperation)(0),                    // 8: srlinux.sdk.SdkMgrOperation
}
var file_ndk_lldp_service_proto_depIdxs = []int32{
	3, // 0: srlinux.sdk.LldpNeighborSubscriptionRequest.key:type_name -> srlinux.sdk.LldpNeighborKey
	0, // 1: srlinux.sdk.LldpNeighborKey.chassis_type:type_name -> srlinux.sdk.LldpNeighborKey.ChassisIdType
	1, // 2: srlinux.sdk.LldpNeighborData.port_type:type_name -> srlinux.sdk.LldpNeighborData.PortSubType
	6, // 3: srlinux.sdk.LldpNeighborData.source_mac:type_name -> srlinux.sdk.MacAddressPb
	7, // 4: srlinux.sdk.LldpNeighborData.bgp_peer_addresses:type_name -> srlinux.sdk.IpAddressPb
	8, // 5: srlinux.sdk.LldpNeighborNotification.op:type_name -> srlinux.sdk.SdkMgrOperation
	3, // 6: srlinux.sdk.LldpNeighborNotification.key:type_name -> srlinux.sdk.LldpNeighborKey
	4, // 7: srlinux.sdk.LldpNeighborNotification.data:type_name -> srlinux.sdk.LldpNeighborData
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ndk_lldp_service_proto_init() }
func file_ndk_lldp_service_proto_init() {
	if File_ndk_lldp_service_proto != nil {
		return
	}
	file_ndk_sdk_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ndk_lldp_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_lldp_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_lldp_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_lldp_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ndk_lldp_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ndk_lldp_service_proto_goTypes,
		DependencyIndexes: file_ndk_lldp_service_proto_depIdxs,
		EnumInfos:         file_ndk_lldp_service_proto_enumTypes,
		MessageInfos:      file_ndk_lldp_service_proto_msgTypes,
	}.Build()
	File_ndk_lldp_service_proto = out.File
	file_ndk_lldp_service_proto_rawDesc = nil
	file_ndk_lldp_service_proto_goTypes = nil
	file_ndk_lldp_service_proto_depIdxs = nil
}
