// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ndk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SdkMgrMplsRouteServiceClient is the client API for SdkMgrMplsRouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdkMgrMplsRouteServiceClient interface {
	// Deprecated: Do not use.
	/// MPLS route add or update; can add or update more than one MPLS route in one request
	MplsRouteAddOrUpdate(ctx context.Context, in *MplsRouteAddRequest, opts ...grpc.CallOption) (*MplsRouteAddResponse, error)
	// Deprecated: Do not use.
	/// MPLS route delete; can delete more than one MPLS route in one request
	MplsRouteDelete(ctx context.Context, in *MplsRouteDeleteRequest, opts ...grpc.CallOption) (*MplsRouteDeleteResponse, error)
	/// Synchronization start to begin synchronization operation
	SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	/// Synchronization end to close synchronization operation
	SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type sdkMgrMplsRouteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkMgrMplsRouteServiceClient(cc grpc.ClientConnInterface) SdkMgrMplsRouteServiceClient {
	return &sdkMgrMplsRouteServiceClient{cc}
}

// Deprecated: Do not use.
func (c *sdkMgrMplsRouteServiceClient) MplsRouteAddOrUpdate(ctx context.Context, in *MplsRouteAddRequest, opts ...grpc.CallOption) (*MplsRouteAddResponse, error) {
	out := new(MplsRouteAddResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrMplsRouteService/MplsRouteAddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *sdkMgrMplsRouteServiceClient) MplsRouteDelete(ctx context.Context, in *MplsRouteDeleteRequest, opts ...grpc.CallOption) (*MplsRouteDeleteResponse, error) {
	out := new(MplsRouteDeleteResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrMplsRouteService/MplsRouteDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkMgrMplsRouteServiceClient) SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrMplsRouteService/SyncStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkMgrMplsRouteServiceClient) SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrMplsRouteService/SyncEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkMgrMplsRouteServiceServer is the server API for SdkMgrMplsRouteService service.
// All implementations must embed UnimplementedSdkMgrMplsRouteServiceServer
// for forward compatibility
type SdkMgrMplsRouteServiceServer interface {
	// Deprecated: Do not use.
	/// MPLS route add or update; can add or update more than one MPLS route in one request
	MplsRouteAddOrUpdate(context.Context, *MplsRouteAddRequest) (*MplsRouteAddResponse, error)
	// Deprecated: Do not use.
	/// MPLS route delete; can delete more than one MPLS route in one request
	MplsRouteDelete(context.Context, *MplsRouteDeleteRequest) (*MplsRouteDeleteResponse, error)
	/// Synchronization start to begin synchronization operation
	SyncStart(context.Context, *SyncRequest) (*SyncResponse, error)
	/// Synchronization end to close synchronization operation
	SyncEnd(context.Context, *SyncRequest) (*SyncResponse, error)
	mustEmbedUnimplementedSdkMgrMplsRouteServiceServer()
}

// UnimplementedSdkMgrMplsRouteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSdkMgrMplsRouteServiceServer struct {
}

func (UnimplementedSdkMgrMplsRouteServiceServer) MplsRouteAddOrUpdate(context.Context, *MplsRouteAddRequest) (*MplsRouteAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MplsRouteAddOrUpdate not implemented")
}
func (UnimplementedSdkMgrMplsRouteServiceServer) MplsRouteDelete(context.Context, *MplsRouteDeleteRequest) (*MplsRouteDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MplsRouteDelete not implemented")
}
func (UnimplementedSdkMgrMplsRouteServiceServer) SyncStart(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncStart not implemented")
}
func (UnimplementedSdkMgrMplsRouteServiceServer) SyncEnd(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncEnd not implemented")
}
func (UnimplementedSdkMgrMplsRouteServiceServer) mustEmbedUnimplementedSdkMgrMplsRouteServiceServer() {
}

// UnsafeSdkMgrMplsRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdkMgrMplsRouteServiceServer will
// result in compilation errors.
type UnsafeSdkMgrMplsRouteServiceServer interface {
	mustEmbedUnimplementedSdkMgrMplsRouteServiceServer()
}

func RegisterSdkMgrMplsRouteServiceServer(s grpc.ServiceRegistrar, srv SdkMgrMplsRouteServiceServer) {
	s.RegisterService(&SdkMgrMplsRouteService_ServiceDesc, srv)
}

func _SdkMgrMplsRouteService_MplsRouteAddOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MplsRouteAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkMgrMplsRouteServiceServer).MplsRouteAddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srlinux.sdk.SdkMgrMplsRouteService/MplsRouteAddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkMgrMplsRouteServiceServer).MplsRouteAddOrUpdate(ctx, req.(*MplsRouteAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkMgrMplsRouteService_MplsRouteDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MplsRouteDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkMgrMplsRouteServiceServer).MplsRouteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srlinux.sdk.SdkMgrMplsRouteService/MplsRouteDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkMgrMplsRouteServiceServer).MplsRouteDelete(ctx, req.(*MplsRouteDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkMgrMplsRouteService_SyncStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkMgrMplsRouteServiceServer).SyncStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srlinux.sdk.SdkMgrMplsRouteService/SyncStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkMgrMplsRouteServiceServer).SyncStart(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkMgrMplsRouteService_SyncEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkMgrMplsRouteServiceServer).SyncEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srlinux.sdk.SdkMgrMplsRouteService/SyncEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkMgrMplsRouteServiceServer).SyncEnd(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SdkMgrMplsRouteService_ServiceDesc is the grpc.ServiceDesc for SdkMgrMplsRouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SdkMgrMplsRouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "srlinux.sdk.SdkMgrMplsRouteService",
	HandlerType: (*SdkMgrMplsRouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MplsRouteAddOrUpdate",
			Handler:    _SdkMgrMplsRouteService_MplsRouteAddOrUpdate_Handler,
		},
		{
			MethodName: "MplsRouteDelete",
			Handler:    _SdkMgrMplsRouteService_MplsRouteDelete_Handler,
		},
		{
			MethodName: "SyncStart",
			Handler:    _SdkMgrMplsRouteService_SyncStart_Handler,
		},
		{
			MethodName: "SyncEnd",
			Handler:    _SdkMgrMplsRouteService_SyncEnd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ndk/mpls_service.proto",
}
