//*********************************************************************************************************************
//  Description: interface between router agents and SDK service manager
//
//  Copyright (c) 2018 Nokia
//********************************************************************************************************************

// NDK Version: v0.5.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: ndk/bfd_service.proto

package ndk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents BFD session status.
type BfdSessionStatus int32

const (
	BfdSessionStatus_BFD_SESSION_STATUS_INVALID    BfdSessionStatus = 0 // Session invalid/unspecified
	BfdSessionStatus_BFD_SESSION_STATUS_ADMIN_DOWN BfdSessionStatus = 1 // Admin down
	BfdSessionStatus_BFD_SESSION_STATUS_DOWN       BfdSessionStatus = 2 // Status down
	BfdSessionStatus_BFD_SESSION_STATUS_INIT       BfdSessionStatus = 3 // Status initializing
	BfdSessionStatus_BFD_SESSION_STATUS_UP         BfdSessionStatus = 4 // Status up and running
)

// Enum value maps for BfdSessionStatus.
var (
	BfdSessionStatus_name = map[int32]string{
		0: "BFD_SESSION_STATUS_INVALID",
		1: "BFD_SESSION_STATUS_ADMIN_DOWN",
		2: "BFD_SESSION_STATUS_DOWN",
		3: "BFD_SESSION_STATUS_INIT",
		4: "BFD_SESSION_STATUS_UP",
	}
	BfdSessionStatus_value = map[string]int32{
		"BFD_SESSION_STATUS_INVALID":    0,
		"BFD_SESSION_STATUS_ADMIN_DOWN": 1,
		"BFD_SESSION_STATUS_DOWN":       2,
		"BFD_SESSION_STATUS_INIT":       3,
		"BFD_SESSION_STATUS_UP":         4,
	}
)

func (x BfdSessionStatus) Enum() *BfdSessionStatus {
	p := new(BfdSessionStatus)
	*p = x
	return p
}

func (x BfdSessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdSessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_bfd_service_proto_enumTypes[0].Descriptor()
}

func (BfdSessionStatus) Type() protoreflect.EnumType {
	return &file_ndk_bfd_service_proto_enumTypes[0]
}

func (x BfdSessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdSessionStatus.Descriptor instead.
func (BfdSessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{0}
}

// Represents BFD session type.
type BfdSessionType int32

const (
	BfdSessionType_BFD_SESSION_TYPE_UNKNOWN   BfdSessionType = 0 // Unknown session type
	BfdSessionType_BFD_SESSION_TYPE_P2P       BfdSessionType = 1 // Peer-to-peer session type
	BfdSessionType_BFD_SESSION_TYPE_MICROBFD  BfdSessionType = 2 // microbfd session type
	BfdSessionType_BFD_SESSION_TYPE_SBFD_ECHO BfdSessionType = 3 // seamless BFD session type, echo initiator
)

// Enum value maps for BfdSessionType.
var (
	BfdSessionType_name = map[int32]string{
		0: "BFD_SESSION_TYPE_UNKNOWN",
		1: "BFD_SESSION_TYPE_P2P",
		2: "BFD_SESSION_TYPE_MICROBFD",
		3: "BFD_SESSION_TYPE_SBFD_ECHO",
	}
	BfdSessionType_value = map[string]int32{
		"BFD_SESSION_TYPE_UNKNOWN":   0,
		"BFD_SESSION_TYPE_P2P":       1,
		"BFD_SESSION_TYPE_MICROBFD":  2,
		"BFD_SESSION_TYPE_SBFD_ECHO": 3,
	}
)

func (x BfdSessionType) Enum() *BfdSessionType {
	p := new(BfdSessionType)
	*p = x
	return p
}

func (x BfdSessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdSessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_bfd_service_proto_enumTypes[1].Descriptor()
}

func (BfdSessionType) Type() protoreflect.EnumType {
	return &file_ndk_bfd_service_proto_enumTypes[1]
}

func (x BfdSessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdSessionType.Descriptor instead.
func (BfdSessionType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{1}
}

type BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType int32

const (
	BfdGeneralSessionKey_SbfdechoKey_SRPOLICY_USER_TYPE_LOCAL     BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType = 0
	BfdGeneralSessionKey_SbfdechoKey_SRPOLICY_USER_TYPE_TYPE_PCEP BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType = 1
)

// Enum value maps for BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType.
var (
	BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType_name = map[int32]string{
		0: "SRPOLICY_USER_TYPE_LOCAL",
		1: "SRPOLICY_USER_TYPE_TYPE_PCEP",
	}
	BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType_value = map[string]int32{
		"SRPOLICY_USER_TYPE_LOCAL":     0,
		"SRPOLICY_USER_TYPE_TYPE_PCEP": 1,
	}
)

func (x BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType) Enum() *BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType {
	p := new(BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType)
	*p = x
	return p
}

func (x BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_bfd_service_proto_enumTypes[2].Descriptor()
}

func (BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType) Type() protoreflect.EnumType {
	return &file_ndk_bfd_service_proto_enumTypes[2]
}

func (x BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType.Descriptor instead.
func (BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{1, 2, 0}
}

// Represents BFD session subtype.
type BfdGeneralSessionData_BfdSessionSubType int32

const (
	BfdGeneralSessionData_BFD_SESSION_SUB_TYPE_UNKNOWN    BfdGeneralSessionData_BfdSessionSubType = 0 // Session subtype unknown
	BfdGeneralSessionData_BFD_SESSION_SUB_TYPE_SINGLE_HOP BfdGeneralSessionData_BfdSessionSubType = 1 // Single-hop session
	BfdGeneralSessionData_BFD_SESSION_SUB_TYPE_MULTI_HOP  BfdGeneralSessionData_BfdSessionSubType = 2 // Multi-hop session
	BfdGeneralSessionData_BFD_SESSION_SUB_TYPE_MICROBFD   BfdGeneralSessionData_BfdSessionSubType = 3 // microbfd session
	BfdGeneralSessionData_BFD_SESSION_SUB_TYPE_SBFD_ECHO  BfdGeneralSessionData_BfdSessionSubType = 4 // microbfd session
)

// Enum value maps for BfdGeneralSessionData_BfdSessionSubType.
var (
	BfdGeneralSessionData_BfdSessionSubType_name = map[int32]string{
		0: "BFD_SESSION_SUB_TYPE_UNKNOWN",
		1: "BFD_SESSION_SUB_TYPE_SINGLE_HOP",
		2: "BFD_SESSION_SUB_TYPE_MULTI_HOP",
		3: "BFD_SESSION_SUB_TYPE_MICROBFD",
		4: "BFD_SESSION_SUB_TYPE_SBFD_ECHO",
	}
	BfdGeneralSessionData_BfdSessionSubType_value = map[string]int32{
		"BFD_SESSION_SUB_TYPE_UNKNOWN":    0,
		"BFD_SESSION_SUB_TYPE_SINGLE_HOP": 1,
		"BFD_SESSION_SUB_TYPE_MULTI_HOP":  2,
		"BFD_SESSION_SUB_TYPE_MICROBFD":   3,
		"BFD_SESSION_SUB_TYPE_SBFD_ECHO":  4,
	}
)

func (x BfdGeneralSessionData_BfdSessionSubType) Enum() *BfdGeneralSessionData_BfdSessionSubType {
	p := new(BfdGeneralSessionData_BfdSessionSubType)
	*p = x
	return p
}

func (x BfdGeneralSessionData_BfdSessionSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdGeneralSessionData_BfdSessionSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_bfd_service_proto_enumTypes[3].Descriptor()
}

func (BfdGeneralSessionData_BfdSessionSubType) Type() protoreflect.EnumType {
	return &file_ndk_bfd_service_proto_enumTypes[3]
}

func (x BfdGeneralSessionData_BfdSessionSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdGeneralSessionData_BfdSessionSubType.Descriptor instead.
func (BfdGeneralSessionData_BfdSessionSubType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{2, 0}
}

// *
// Represents BFD session subscription request.
type BfdSessionSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *BfdGeneralSessionKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // Optional, to filter on name
}

func (x *BfdSessionSubscriptionRequest) Reset() {
	*x = BfdSessionSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_bfd_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdSessionSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdSessionSubscriptionRequest) ProtoMessage() {}

func (x *BfdSessionSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_bfd_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdSessionSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*BfdSessionSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{0}
}

func (x *BfdSessionSubscriptionRequest) GetKey() *BfdGeneralSessionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// *
// Represents BFD session key.
type BfdGeneralSessionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is always present, other key field presence is determined by type
	Type BfdSessionType `protobuf:"varint,10,opt,name=type,proto3,enum=srlinux.sdk.BfdSessionType" json:"type,omitempty"` // Session type
	// Types that are assignable to Key:
	//
	//	*BfdGeneralSessionKey_P2P
	//	*BfdGeneralSessionKey_Microbfd
	//	*BfdGeneralSessionKey_Sbfdecho
	Key isBfdGeneralSessionKey_Key `protobuf_oneof:"key"`
}

func (x *BfdGeneralSessionKey) Reset() {
	*x = BfdGeneralSessionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_bfd_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdGeneralSessionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdGeneralSessionKey) ProtoMessage() {}

func (x *BfdGeneralSessionKey) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_bfd_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdGeneralSessionKey.ProtoReflect.Descriptor instead.
func (*BfdGeneralSessionKey) Descriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{1}
}

func (x *BfdGeneralSessionKey) GetType() BfdSessionType {
	if x != nil {
		return x.Type
	}
	return BfdSessionType_BFD_SESSION_TYPE_UNKNOWN
}

func (m *BfdGeneralSessionKey) GetKey() isBfdGeneralSessionKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *BfdGeneralSessionKey) GetP2P() *BfdGeneralSessionKey_P2PKey {
	if x, ok := x.GetKey().(*BfdGeneralSessionKey_P2P); ok {
		return x.P2P
	}
	return nil
}

func (x *BfdGeneralSessionKey) GetMicrobfd() *BfdGeneralSessionKey_MicrobfdKey {
	if x, ok := x.GetKey().(*BfdGeneralSessionKey_Microbfd); ok {
		return x.Microbfd
	}
	return nil
}

func (x *BfdGeneralSessionKey) GetSbfdecho() *BfdGeneralSessionKey_SbfdechoKey {
	if x, ok := x.GetKey().(*BfdGeneralSessionKey_Sbfdecho); ok {
		return x.Sbfdecho
	}
	return nil
}

type isBfdGeneralSessionKey_Key interface {
	isBfdGeneralSessionKey_Key()
}

type BfdGeneralSessionKey_P2P struct {
	P2P *BfdGeneralSessionKey_P2PKey `protobuf:"bytes,20,opt,name=p2p,proto3,oneof"`
}

type BfdGeneralSessionKey_Microbfd struct {
	Microbfd *BfdGeneralSessionKey_MicrobfdKey `protobuf:"bytes,30,opt,name=microbfd,proto3,oneof"`
}

type BfdGeneralSessionKey_Sbfdecho struct {
	Sbfdecho *BfdGeneralSessionKey_SbfdechoKey `protobuf:"bytes,40,opt,name=sbfdecho,proto3,oneof"`
}

func (*BfdGeneralSessionKey_P2P) isBfdGeneralSessionKey_Key() {}

func (*BfdGeneralSessionKey_Microbfd) isBfdGeneralSessionKey_Key() {}

func (*BfdGeneralSessionKey_Sbfdecho) isBfdGeneralSessionKey_Key() {}

// *
// Represents BFD session data.
type BfdGeneralSessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           BfdSessionStatus                        `protobuf:"varint,1,opt,name=status,proto3,enum=srlinux.sdk.BfdSessionStatus" json:"status,omitempty"`                                                                    // Status of the session
	SubscriptionType BfdGeneralSessionData_BfdSessionSubType `protobuf:"varint,2,opt,name=subscription_type,json=subscriptionType,proto3,enum=srlinux.sdk.BfdGeneralSessionData_BfdSessionSubType" json:"subscription_type,omitempty"` // Subtype of the session
	// source_interface_id is only populated for P2P type
	SourceInterfaceId uint32 `protobuf:"varint,3,opt,name=source_interface_id,json=sourceInterfaceId,proto3" json:"source_interface_id,omitempty"` // Source interface ID
}

func (x *BfdGeneralSessionData) Reset() {
	*x = BfdGeneralSessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_bfd_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdGeneralSessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdGeneralSessionData) ProtoMessage() {}

func (x *BfdGeneralSessionData) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_bfd_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdGeneralSessionData.ProtoReflect.Descriptor instead.
func (*BfdGeneralSessionData) Descriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{2}
}

func (x *BfdGeneralSessionData) GetStatus() BfdSessionStatus {
	if x != nil {
		return x.Status
	}
	return BfdSessionStatus_BFD_SESSION_STATUS_INVALID
}

func (x *BfdGeneralSessionData) GetSubscriptionType() BfdGeneralSessionData_BfdSessionSubType {
	if x != nil {
		return x.SubscriptionType
	}
	return BfdGeneralSessionData_BFD_SESSION_SUB_TYPE_UNKNOWN
}

func (x *BfdGeneralSessionData) GetSourceInterfaceId() uint32 {
	if x != nil {
		return x.SourceInterfaceId
	}
	return 0
}

// *
// Represents BFD session notification.
type BfdSessionNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op   SdkMgrOperation        `protobuf:"varint,1,opt,name=op,proto3,enum=srlinux.sdk.SdkMgrOperation" json:"op,omitempty"` // Operation such as session create, delete, or update
	Key  *BfdGeneralSessionKey  `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                                 // Session key
	Data *BfdGeneralSessionData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                               // Session data
}

func (x *BfdSessionNotification) Reset() {
	*x = BfdSessionNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_bfd_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdSessionNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdSessionNotification) ProtoMessage() {}

func (x *BfdSessionNotification) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_bfd_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdSessionNotification.ProtoReflect.Descriptor instead.
func (*BfdSessionNotification) Descriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{3}
}

func (x *BfdSessionNotification) GetOp() SdkMgrOperation {
	if x != nil {
		return x.Op
	}
	return SdkMgrOperation_SDK_MGR_OPERATION_CREATE
}

func (x *BfdSessionNotification) GetKey() *BfdGeneralSessionKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *BfdSessionNotification) GetData() *BfdGeneralSessionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BfdGeneralSessionKey_P2PKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceIpAddress                   *IpAddressPb `protobuf:"bytes,1,opt,name=source_ip_address,json=sourceIpAddress,proto3" json:"source_ip_address,omitempty"`                                                                // Source IP address of the session
	DestinationIpAddress              *IpAddressPb `protobuf:"bytes,2,opt,name=destination_ip_address,json=destinationIpAddress,proto3" json:"destination_ip_address,omitempty"`                                                 // Destination IP address of the session
	InstanceId                        uint32       `protobuf:"varint,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`                                                                                // Network instance identifier
	Ipv4UnnumberedOrIpv6LlInterfaceId uint32       `protobuf:"varint,4,opt,name=ipv4_unnumbered_or_ipv6_ll_interface_id,json=ipv4UnnumberedOrIpv6LlInterfaceId,proto3" json:"ipv4_unnumbered_or_ipv6_ll_interface_id,omitempty"` // Global if id for ipv4 unnumbered or ipv6 link local
	// session, otherwise 0
	SpecifiedDiscriminator bool `protobuf:"varint,5,opt,name=specified_discriminator,json=specifiedDiscriminator,proto3" json:"specified_discriminator,omitempty"` // True if discriminators are specified
}

func (x *BfdGeneralSessionKey_P2PKey) Reset() {
	*x = BfdGeneralSessionKey_P2PKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_bfd_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdGeneralSessionKey_P2PKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdGeneralSessionKey_P2PKey) ProtoMessage() {}

func (x *BfdGeneralSessionKey_P2PKey) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_bfd_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdGeneralSessionKey_P2PKey.ProtoReflect.Descriptor instead.
func (*BfdGeneralSessionKey_P2PKey) Descriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BfdGeneralSessionKey_P2PKey) GetSourceIpAddress() *IpAddressPb {
	if x != nil {
		return x.SourceIpAddress
	}
	return nil
}

func (x *BfdGeneralSessionKey_P2PKey) GetDestinationIpAddress() *IpAddressPb {
	if x != nil {
		return x.DestinationIpAddress
	}
	return nil
}

func (x *BfdGeneralSessionKey_P2PKey) GetInstanceId() uint32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *BfdGeneralSessionKey_P2PKey) GetIpv4UnnumberedOrIpv6LlInterfaceId() uint32 {
	if x != nil {
		return x.Ipv4UnnumberedOrIpv6LlInterfaceId
	}
	return 0
}

func (x *BfdGeneralSessionKey_P2PKey) GetSpecifiedDiscriminator() bool {
	if x != nil {
		return x.SpecifiedDiscriminator
	}
	return false
}

type BfdGeneralSessionKey_MicrobfdKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *BfdGeneralSessionKey_MicrobfdKey) Reset() {
	*x = BfdGeneralSessionKey_MicrobfdKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_bfd_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdGeneralSessionKey_MicrobfdKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdGeneralSessionKey_MicrobfdKey) ProtoMessage() {}

func (x *BfdGeneralSessionKey_MicrobfdKey) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_bfd_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdGeneralSessionKey_MicrobfdKey.ProtoReflect.Descriptor instead.
func (*BfdGeneralSessionKey_MicrobfdKey) Descriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *BfdGeneralSessionKey_MicrobfdKey) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type BfdGeneralSessionKey_SbfdechoKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId            uint32                                            `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // Network instance identifier
	SrPolicySegmentListId uint32                                            `protobuf:"varint,2,opt,name=sr_policy_segment_list_id,json=srPolicySegmentListId,proto3" json:"sr_policy_segment_list_id,omitempty"`
	PolicyName            string                                            `protobuf:"bytes,3,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	UserType              BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType `protobuf:"varint,4,opt,name=user_type,json=userType,proto3,enum=srlinux.sdk.BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType" json:"user_type,omitempty"`
	SrPolicyEndpoint      *IpAddressPb                                      `protobuf:"bytes,5,opt,name=sr_policy_endpoint,json=srPolicyEndpoint,proto3" json:"sr_policy_endpoint,omitempty"`
}

func (x *BfdGeneralSessionKey_SbfdechoKey) Reset() {
	*x = BfdGeneralSessionKey_SbfdechoKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_bfd_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdGeneralSessionKey_SbfdechoKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdGeneralSessionKey_SbfdechoKey) ProtoMessage() {}

func (x *BfdGeneralSessionKey_SbfdechoKey) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_bfd_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdGeneralSessionKey_SbfdechoKey.ProtoReflect.Descriptor instead.
func (*BfdGeneralSessionKey_SbfdechoKey) Descriptor() ([]byte, []int) {
	return file_ndk_bfd_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *BfdGeneralSessionKey_SbfdechoKey) GetInstanceId() uint32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *BfdGeneralSessionKey_SbfdechoKey) GetSrPolicySegmentListId() uint32 {
	if x != nil {
		return x.SrPolicySegmentListId
	}
	return 0
}

func (x *BfdGeneralSessionKey_SbfdechoKey) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *BfdGeneralSessionKey_SbfdechoKey) GetUserType() BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType {
	if x != nil {
		return x.UserType
	}
	return BfdGeneralSessionKey_SbfdechoKey_SRPOLICY_USER_TYPE_LOCAL
}

func (x *BfdGeneralSessionKey_SbfdechoKey) GetSrPolicyEndpoint() *IpAddressPb {
	if x != nil {
		return x.SrPolicyEndpoint
	}
	return nil
}

var File_ndk_bfd_service_proto protoreflect.FileDescriptor

var file_ndk_bfd_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6e, 0x64, 0x6b, 0x2f, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x73, 0x64, 0x6b, 0x1a, 0x14, 0x6e, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x1d, 0x42, 0x66,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0xb0, 0x08, 0x0a, 0x14, 0x42, 0x66, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x70, 0x32,
	0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x2e, 0x50, 0x32, 0x70, 0x4b, 0x65,
	0x79, 0x48, 0x00, 0x52, 0x03, 0x70, 0x32, 0x70, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x62, 0x66, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x72, 0x6c,
	0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x2e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x62, 0x66, 0x64, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x62, 0x66, 0x64, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x62, 0x66, 0x64, 0x65, 0x63, 0x68,
	0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x62, 0x66, 0x64, 0x65,
	0x63, 0x68, 0x6f, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x62, 0x66, 0x64, 0x65, 0x63,
	0x68, 0x6f, 0x1a, 0xcc, 0x02, 0x0a, 0x06, 0x50, 0x32, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x62, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x62, 0x52, 0x14, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x27, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x72, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x1a, 0x34, 0x0a, 0x0b, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x62, 0x66, 0x64, 0x4b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x82, 0x03, 0x0a, 0x0b, 0x53, 0x62, 0x66, 0x64,
	0x65, 0x63, 0x68, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x72, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x62, 0x66, 0x64, 0x65, 0x63,
	0x68, 0x6f, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x72, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x46, 0x0a, 0x12, 0x73, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x62, 0x52, 0x10, 0x73, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x10, 0x53, 0x72, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x52, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x52,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x43, 0x45, 0x50, 0x10, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0xa9, 0x03, 0x0a, 0x15, 0x42, 0x66, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66,
	0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x42, 0x66, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x23, 0x0a, 0x1f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x50, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x5f, 0x48, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x42, 0x46, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x42,
	0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x42, 0x46, 0x44, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x04, 0x22,
	0xb3, 0x01, 0x0a, 0x16, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x64, 0x6b, 0x4d, 0x67, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x33, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x72,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xaa, 0x01, 0x0a, 0x10, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x46,
	0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x46,
	0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x46,
	0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x46, 0x44, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50,
	0x10, 0x04, 0x2a, 0x87, 0x01, 0x0a, 0x0e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x42, 0x46, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x42, 0x46, 0x44, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x03, 0x42, 0x25, 0x5a, 0x23,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6f, 0x6b, 0x69, 0x61,
	0x2f, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2d, 0x6e, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x6e, 0x64, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ndk_bfd_service_proto_rawDescOnce sync.Once
	file_ndk_bfd_service_proto_rawDescData = file_ndk_bfd_service_proto_rawDesc
)

func file_ndk_bfd_service_proto_rawDescGZIP() []byte {
	file_ndk_bfd_service_proto_rawDescOnce.Do(func() {
		file_ndk_bfd_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_ndk_bfd_service_proto_rawDescData)
	})
	return file_ndk_bfd_service_proto_rawDescData
}

var file_ndk_bfd_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ndk_bfd_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ndk_bfd_service_proto_goTypes = []interface{}{
	(BfdSessionStatus)(0), // 0: srlinux.sdk.BfdSessionStatus
	(BfdSessionType)(0),   // 1: srlinux.sdk.BfdSessionType
	(BfdGeneralSessionKey_SbfdechoKey_SrpolicyUserType)(0), // 2: srlinux.sdk.BfdGeneralSessionKey.SbfdechoKey.SrpolicyUserType
	(BfdGeneralSessionData_BfdSessionSubType)(0),           // 3: srlinux.sdk.BfdGeneralSessionData.BfdSessionSubType
	(*BfdSessionSubscriptionRequest)(nil),                  // 4: srlinux.sdk.BfdSessionSubscriptionRequest
	(*BfdGeneralSessionKey)(nil),                           // 5: srlinux.sdk.BfdGeneralSessionKey
	(*BfdGeneralSessionData)(nil),                          // 6: srlinux.sdk.BfdGeneralSessionData
	(*BfdSessionNotification)(nil),                         // 7: srlinux.sdk.BfdSessionNotification
	(*BfdGeneralSessionKey_P2PKey)(nil),                    // 8: srlinux.sdk.BfdGeneralSessionKey.P2pKey
	(*BfdGeneralSessionKey_MicrobfdKey)(nil),               // 9: srlinux.sdk.BfdGeneralSessionKey.MicrobfdKey
	(*BfdGeneralSessionKey_SbfdechoKey)(nil),               // 10: srlinux.sdk.BfdGeneralSessionKey.SbfdechoKey
	(SdkMgrOperation)(0),                                   // 11: srlinux.sdk.SdkMgrOperation
	(*IpAddressPb)(nil),                                    // 12: srlinux.sdk.IpAddressPb
}
var file_ndk_bfd_service_proto_depIdxs = []int32{
	5,  // 0: srlinux.sdk.BfdSessionSubscriptionRequest.key:type_name -> srlinux.sdk.BfdGeneralSessionKey
	1,  // 1: srlinux.sdk.BfdGeneralSessionKey.type:type_name -> srlinux.sdk.BfdSessionType
	8,  // 2: srlinux.sdk.BfdGeneralSessionKey.p2p:type_name -> srlinux.sdk.BfdGeneralSessionKey.P2pKey
	9,  // 3: srlinux.sdk.BfdGeneralSessionKey.microbfd:type_name -> srlinux.sdk.BfdGeneralSessionKey.MicrobfdKey
	10, // 4: srlinux.sdk.BfdGeneralSessionKey.sbfdecho:type_name -> srlinux.sdk.BfdGeneralSessionKey.SbfdechoKey
	0,  // 5: srlinux.sdk.BfdGeneralSessionData.status:type_name -> srlinux.sdk.BfdSessionStatus
	3,  // 6: srlinux.sdk.BfdGeneralSessionData.subscription_type:type_name -> srlinux.sdk.BfdGeneralSessionData.BfdSessionSubType
	11, // 7: srlinux.sdk.BfdSessionNotification.op:type_name -> srlinux.sdk.SdkMgrOperation
	5,  // 8: srlinux.sdk.BfdSessionNotification.key:type_name -> srlinux.sdk.BfdGeneralSessionKey
	6,  // 9: srlinux.sdk.BfdSessionNotification.data:type_name -> srlinux.sdk.BfdGeneralSessionData
	12, // 10: srlinux.sdk.BfdGeneralSessionKey.P2pKey.source_ip_address:type_name -> srlinux.sdk.IpAddressPb
	12, // 11: srlinux.sdk.BfdGeneralSessionKey.P2pKey.destination_ip_address:type_name -> srlinux.sdk.IpAddressPb
	2,  // 12: srlinux.sdk.BfdGeneralSessionKey.SbfdechoKey.user_type:type_name -> srlinux.sdk.BfdGeneralSessionKey.SbfdechoKey.SrpolicyUserType
	12, // 13: srlinux.sdk.BfdGeneralSessionKey.SbfdechoKey.sr_policy_endpoint:type_name -> srlinux.sdk.IpAddressPb
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_ndk_bfd_service_proto_init() }
func file_ndk_bfd_service_proto_init() {
	if File_ndk_bfd_service_proto != nil {
		return
	}
	file_ndk_sdk_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ndk_bfd_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdSessionSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_bfd_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdGeneralSessionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_bfd_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdGeneralSessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_bfd_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdSessionNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_bfd_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdGeneralSessionKey_P2PKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_bfd_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdGeneralSessionKey_MicrobfdKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_bfd_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdGeneralSessionKey_SbfdechoKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ndk_bfd_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BfdGeneralSessionKey_P2P)(nil),
		(*BfdGeneralSessionKey_Microbfd)(nil),
		(*BfdGeneralSessionKey_Sbfdecho)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ndk_bfd_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ndk_bfd_service_proto_goTypes,
		DependencyIndexes: file_ndk_bfd_service_proto_depIdxs,
		EnumInfos:         file_ndk_bfd_service_proto_enumTypes,
		MessageInfos:      file_ndk_bfd_service_proto_msgTypes,
	}.Build()
	File_ndk_bfd_service_proto = out.File
	file_ndk_bfd_service_proto_rawDesc = nil
	file_ndk_bfd_service_proto_goTypes = nil
	file_ndk_bfd_service_proto_depIdxs = nil
}
