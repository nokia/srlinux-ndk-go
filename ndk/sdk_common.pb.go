//*********************************************************************************************************************
//  Description: interface between router agents and SDK service manager
//
//  Copyright (c) 2018 Nokia
//********************************************************************************************************************

// NDK Version: v0.5.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: ndk/sdk_common.proto

package ndk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Represents interface type.
type IfMgrIfType int32

const (
	IfMgrIfType_ETHERNET    IfMgrIfType = 0  // Ethernet interface
	IfMgrIfType_LOOPBACK    IfMgrIfType = 1  // Loopback interface
	IfMgrIfType_MANAGEMENT  IfMgrIfType = 2  // Management interface
	IfMgrIfType_AGGREGATE   IfMgrIfType = 3  // Aggregate(LAG) interface
	IfMgrIfType_IRB         IfMgrIfType = 4  // Integrated Routing and Bridging (IRB) interface
	IfMgrIfType_SYSTEM      IfMgrIfType = 5  // System interface
	IfMgrIfType_LIF         IfMgrIfType = 6  // linux interface
	IfMgrIfType_NIC         IfMgrIfType = 7  // linux nic interface (bus/dev/fn)
	IfMgrIfType_VHOST       IfMgrIfType = 8  // vhost-net interface, vhn-<name> name for sock-path
	IfMgrIfType_KKLIF       IfMgrIfType = 9  // temp name for new style of lif interface
	IfMgrIfType_KKVHOST     IfMgrIfType = 10 // temp name for new style of vhost interface
	IfMgrIfType_SYNC        IfMgrIfType = 11 // 1588 sync interface
	IfMgrIfType_IF_TYPE_MAX IfMgrIfType = 12
)

// Enum value maps for IfMgrIfType.
var (
	IfMgrIfType_name = map[int32]string{
		0:  "ETHERNET",
		1:  "LOOPBACK",
		2:  "MANAGEMENT",
		3:  "AGGREGATE",
		4:  "IRB",
		5:  "SYSTEM",
		6:  "LIF",
		7:  "NIC",
		8:  "VHOST",
		9:  "KKLIF",
		10: "KKVHOST",
		11: "SYNC",
		12: "IF_TYPE_MAX",
	}
	IfMgrIfType_value = map[string]int32{
		"ETHERNET":    0,
		"LOOPBACK":    1,
		"MANAGEMENT":  2,
		"AGGREGATE":   3,
		"IRB":         4,
		"SYSTEM":      5,
		"LIF":         6,
		"NIC":         7,
		"VHOST":       8,
		"KKLIF":       9,
		"KKVHOST":     10,
		"SYNC":        11,
		"IF_TYPE_MAX": 12,
	}
)

func (x IfMgrIfType) Enum() *IfMgrIfType {
	p := new(IfMgrIfType)
	*p = x
	return p
}

func (x IfMgrIfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfMgrIfType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[0].Descriptor()
}

func (IfMgrIfType) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[0]
}

func (x IfMgrIfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfMgrIfType.Descriptor instead.
func (IfMgrIfType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{0}
}

// *
// Represents IP address state.
type IpAddressState int32

const (
	IpAddressState_IPADDR_STATE_UNKNOWN      IpAddressState = 0 // IP address state unknown
	IpAddressState_IPADDR_STATE_TENTATIVE    IpAddressState = 1 // IP address state tentative
	IpAddressState_IPADDR_STATE_DUPLICATED   IpAddressState = 2 // IP address state duplicated
	IpAddressState_IPADDR_STATE_INACCESSIBLE IpAddressState = 3 // IP address state inaccessible
	IpAddressState_IPADDR_STATE_DEPRECATED   IpAddressState = 4 // IP address state deprecated
	IpAddressState_IPADDR_STATE_PREFERRED    IpAddressState = 5 // IP address state preferred
)

// Enum value maps for IpAddressState.
var (
	IpAddressState_name = map[int32]string{
		0: "IPADDR_STATE_UNKNOWN",
		1: "IPADDR_STATE_TENTATIVE",
		2: "IPADDR_STATE_DUPLICATED",
		3: "IPADDR_STATE_INACCESSIBLE",
		4: "IPADDR_STATE_DEPRECATED",
		5: "IPADDR_STATE_PREFERRED",
	}
	IpAddressState_value = map[string]int32{
		"IPADDR_STATE_UNKNOWN":      0,
		"IPADDR_STATE_TENTATIVE":    1,
		"IPADDR_STATE_DUPLICATED":   2,
		"IPADDR_STATE_INACCESSIBLE": 3,
		"IPADDR_STATE_DEPRECATED":   4,
		"IPADDR_STATE_PREFERRED":    5,
	}
)

func (x IpAddressState) Enum() *IpAddressState {
	p := new(IpAddressState)
	*p = x
	return p
}

func (x IpAddressState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpAddressState) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[1].Descriptor()
}

func (IpAddressState) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[1]
}

func (x IpAddressState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpAddressState.Descriptor instead.
func (IpAddressState) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{1}
}

// *
// Represents interface operational state.
type IfOperStateType int32

const (
	IfOperStateType_IF_OPER_STATE_UP               IfOperStateType = 0 // Interface operational state up
	IfOperStateType_IF_OPER_STATE_DOWN             IfOperStateType = 1 // Interface operational state down
	IfOperStateType_IF_OPER_STATE_TESTING          IfOperStateType = 2 // Interface operational state testing
	IfOperStateType_IF_OPER_STATE_UNKNOWN          IfOperStateType = 3 // Interface operational state unknown
	IfOperStateType_IF_OPER_STATE_DORMANT          IfOperStateType = 4 // Interface operational state dormant
	IfOperStateType_IF_OPER_STATE_NOT_PRESENT      IfOperStateType = 5 // Interface operational state not present
	IfOperStateType_IF_OPER_STATE_LOWER_LAYER_DOWN IfOperStateType = 6 // Interface operational state lower layer down
)

// Enum value maps for IfOperStateType.
var (
	IfOperStateType_name = map[int32]string{
		0: "IF_OPER_STATE_UP",
		1: "IF_OPER_STATE_DOWN",
		2: "IF_OPER_STATE_TESTING",
		3: "IF_OPER_STATE_UNKNOWN",
		4: "IF_OPER_STATE_DORMANT",
		5: "IF_OPER_STATE_NOT_PRESENT",
		6: "IF_OPER_STATE_LOWER_LAYER_DOWN",
	}
	IfOperStateType_value = map[string]int32{
		"IF_OPER_STATE_UP":               0,
		"IF_OPER_STATE_DOWN":             1,
		"IF_OPER_STATE_TESTING":          2,
		"IF_OPER_STATE_UNKNOWN":          3,
		"IF_OPER_STATE_DORMANT":          4,
		"IF_OPER_STATE_NOT_PRESENT":      5,
		"IF_OPER_STATE_LOWER_LAYER_DOWN": 6,
	}
)

func (x IfOperStateType) Enum() *IfOperStateType {
	p := new(IfOperStateType)
	*p = x
	return p
}

func (x IfOperStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfOperStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[2].Descriptor()
}

func (IfOperStateType) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[2]
}

func (x IfOperStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfOperStateType.Descriptor instead.
func (IfOperStateType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{2}
}

type IfOperDownReason int32

const (
	IfOperDownReason_IF_OPER_DOWN_NONE                               IfOperDownReason = 0
	IfOperDownReason_IF_OPER_DOWN_PORT_ADMIN_DISABLED                IfOperDownReason = 1
	IfOperDownReason_IF_OPER_DOWN_MDA_ADMIN_DISABLED                 IfOperDownReason = 2
	IfOperDownReason_IF_OPER_DOWN_TRANS_LASER_DISABLED               IfOperDownReason = 3
	IfOperDownReason_IF_OPER_DOWN_MDA_NOT_PRESENT                    IfOperDownReason = 4
	IfOperDownReason_IF_OPER_DOWN_TRANS_NOT_PRESENT                  IfOperDownReason = 5
	IfOperDownReason_IF_OPER_DOWN_PHY_INIT                           IfOperDownReason = 6
	IfOperDownReason_IF_OPER_DOWN_LOWER_LAYER_DOWN                   IfOperDownReason = 7
	IfOperDownReason_IF_OPER_DOWN_MTU_RESOURCES                      IfOperDownReason = 8
	IfOperDownReason_IF_OPER_DOWN_UNSUPPORTED_SPEED                  IfOperDownReason = 9
	IfOperDownReason_IF_OPER_DOWN_UNSUPPORTED_TRANS_FEC              IfOperDownReason = 10
	IfOperDownReason_IF_OPER_DOWN_OTHER                              IfOperDownReason = 11
	IfOperDownReason_IF_OPER_DOWN_PORT_NOT_PRESENT                   IfOperDownReason = 12 // used internally by chassis mgr only - xdp never publish to IDB!
	IfOperDownReason_IF_OPER_DOWN_FABRIC_AVAILABILITY                IfOperDownReason = 13 // used internally by chassis mgr only - xdp never publish to IDB!
	IfOperDownReason_IF_OPER_DOWN_NO_ACTIVE_LINKS                    IfOperDownReason = 14 // lag interface only
	IfOperDownReason_IF_OPER_DOWN_MIN_LINK_THRESHOLD                 IfOperDownReason = 15 // lag interface only
	IfOperDownReason_IF_OPER_DOWN_9_12_SPEED_MISMATCH                IfOperDownReason = 16 // Vodka port 9-12 must all be same speed as port 9
	IfOperDownReason_IF_OPER_DOWN_LAG_RESOURCES                      IfOperDownReason = 17 // lag interface only
	IfOperDownReason_IF_OPER_DOWN_LAG_MEMBER_RESOURCES               IfOperDownReason = 18 // lag member interface only
	IfOperDownReason_IF_OPER_DOWN_STANDBY_SIGNALING                  IfOperDownReason = 19 // ESM multihoming
	IfOperDownReason_IF_OPER_DOWN_HOLD_TIME_UP_ACTIVE                IfOperDownReason = 20 // interface hold-time up is actively holding the interface down
	IfOperDownReason_IF_OPER_DOWN_RELOAD_TIME_ACTIVE                 IfOperDownReason = 21 // interface reload time is actively holding the interface down
	IfOperDownReason_IF_OPER_DOWN_CONNECTOR_DOWN                     IfOperDownReason = 22 // parent connector oper down forces breakout port oper down
	IfOperDownReason_IF_OPER_DOWN_AUTO_NEG_MISMATCH                  IfOperDownReason = 23
	IfOperDownReason_IF_OPER_DOWN_EVENT_HANDLER                      IfOperDownReason = 24 // used internally by chassis mgr only - xdp never publish to IDB!
	IfOperDownReason_IF_OPER_DOWN_UNSUPPORTED_BREAKOUT               IfOperDownReason = 25 // interface doesn't support breakout config
	IfOperDownReason_IF_OPER_DOWN_CFM_CCM_DEFECT                     IfOperDownReason = 26
	IfOperDownReason_IF_OPER_DOWN_CRC_MON_FAIL_THRESH                IfOperDownReason = 27 // crc-monitor signal failure threshold exceeded
	IfOperDownReason_IF_OPER_DOWN_SYMBOL_MON_FAIL_THRESH             IfOperDownReason = 28 // symbol-monitor signal failure threshold exceeded
	IfOperDownReason_IF_OPER_DOWN_LINK_LOSS_FORWARDING               IfOperDownReason = 29 // related to evpn-vpws mpls
	IfOperDownReason_IF_OPER_DOWN_TRANS_DOWN                         IfOperDownReason = 30
	IfOperDownReason_IF_OPER_DOWN_STORM_CONTROL_ACTION               IfOperDownReason = 31
	IfOperDownReason_IF_OPER_DOWN_UNSUPPORTED_NUM_CHANNELS_FOR_SPEED IfOperDownReason = 32
)

// Enum value maps for IfOperDownReason.
var (
	IfOperDownReason_name = map[int32]string{
		0:  "IF_OPER_DOWN_NONE",
		1:  "IF_OPER_DOWN_PORT_ADMIN_DISABLED",
		2:  "IF_OPER_DOWN_MDA_ADMIN_DISABLED",
		3:  "IF_OPER_DOWN_TRANS_LASER_DISABLED",
		4:  "IF_OPER_DOWN_MDA_NOT_PRESENT",
		5:  "IF_OPER_DOWN_TRANS_NOT_PRESENT",
		6:  "IF_OPER_DOWN_PHY_INIT",
		7:  "IF_OPER_DOWN_LOWER_LAYER_DOWN",
		8:  "IF_OPER_DOWN_MTU_RESOURCES",
		9:  "IF_OPER_DOWN_UNSUPPORTED_SPEED",
		10: "IF_OPER_DOWN_UNSUPPORTED_TRANS_FEC",
		11: "IF_OPER_DOWN_OTHER",
		12: "IF_OPER_DOWN_PORT_NOT_PRESENT",
		13: "IF_OPER_DOWN_FABRIC_AVAILABILITY",
		14: "IF_OPER_DOWN_NO_ACTIVE_LINKS",
		15: "IF_OPER_DOWN_MIN_LINK_THRESHOLD",
		16: "IF_OPER_DOWN_9_12_SPEED_MISMATCH",
		17: "IF_OPER_DOWN_LAG_RESOURCES",
		18: "IF_OPER_DOWN_LAG_MEMBER_RESOURCES",
		19: "IF_OPER_DOWN_STANDBY_SIGNALING",
		20: "IF_OPER_DOWN_HOLD_TIME_UP_ACTIVE",
		21: "IF_OPER_DOWN_RELOAD_TIME_ACTIVE",
		22: "IF_OPER_DOWN_CONNECTOR_DOWN",
		23: "IF_OPER_DOWN_AUTO_NEG_MISMATCH",
		24: "IF_OPER_DOWN_EVENT_HANDLER",
		25: "IF_OPER_DOWN_UNSUPPORTED_BREAKOUT",
		26: "IF_OPER_DOWN_CFM_CCM_DEFECT",
		27: "IF_OPER_DOWN_CRC_MON_FAIL_THRESH",
		28: "IF_OPER_DOWN_SYMBOL_MON_FAIL_THRESH",
		29: "IF_OPER_DOWN_LINK_LOSS_FORWARDING",
		30: "IF_OPER_DOWN_TRANS_DOWN",
		31: "IF_OPER_DOWN_STORM_CONTROL_ACTION",
		32: "IF_OPER_DOWN_UNSUPPORTED_NUM_CHANNELS_FOR_SPEED",
	}
	IfOperDownReason_value = map[string]int32{
		"IF_OPER_DOWN_NONE":                               0,
		"IF_OPER_DOWN_PORT_ADMIN_DISABLED":                1,
		"IF_OPER_DOWN_MDA_ADMIN_DISABLED":                 2,
		"IF_OPER_DOWN_TRANS_LASER_DISABLED":               3,
		"IF_OPER_DOWN_MDA_NOT_PRESENT":                    4,
		"IF_OPER_DOWN_TRANS_NOT_PRESENT":                  5,
		"IF_OPER_DOWN_PHY_INIT":                           6,
		"IF_OPER_DOWN_LOWER_LAYER_DOWN":                   7,
		"IF_OPER_DOWN_MTU_RESOURCES":                      8,
		"IF_OPER_DOWN_UNSUPPORTED_SPEED":                  9,
		"IF_OPER_DOWN_UNSUPPORTED_TRANS_FEC":              10,
		"IF_OPER_DOWN_OTHER":                              11,
		"IF_OPER_DOWN_PORT_NOT_PRESENT":                   12,
		"IF_OPER_DOWN_FABRIC_AVAILABILITY":                13,
		"IF_OPER_DOWN_NO_ACTIVE_LINKS":                    14,
		"IF_OPER_DOWN_MIN_LINK_THRESHOLD":                 15,
		"IF_OPER_DOWN_9_12_SPEED_MISMATCH":                16,
		"IF_OPER_DOWN_LAG_RESOURCES":                      17,
		"IF_OPER_DOWN_LAG_MEMBER_RESOURCES":               18,
		"IF_OPER_DOWN_STANDBY_SIGNALING":                  19,
		"IF_OPER_DOWN_HOLD_TIME_UP_ACTIVE":                20,
		"IF_OPER_DOWN_RELOAD_TIME_ACTIVE":                 21,
		"IF_OPER_DOWN_CONNECTOR_DOWN":                     22,
		"IF_OPER_DOWN_AUTO_NEG_MISMATCH":                  23,
		"IF_OPER_DOWN_EVENT_HANDLER":                      24,
		"IF_OPER_DOWN_UNSUPPORTED_BREAKOUT":               25,
		"IF_OPER_DOWN_CFM_CCM_DEFECT":                     26,
		"IF_OPER_DOWN_CRC_MON_FAIL_THRESH":                27,
		"IF_OPER_DOWN_SYMBOL_MON_FAIL_THRESH":             28,
		"IF_OPER_DOWN_LINK_LOSS_FORWARDING":               29,
		"IF_OPER_DOWN_TRANS_DOWN":                         30,
		"IF_OPER_DOWN_STORM_CONTROL_ACTION":               31,
		"IF_OPER_DOWN_UNSUPPORTED_NUM_CHANNELS_FOR_SPEED": 32,
	}
)

func (x IfOperDownReason) Enum() *IfOperDownReason {
	p := new(IfOperDownReason)
	*p = x
	return p
}

func (x IfOperDownReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfOperDownReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[3].Descriptor()
}

func (IfOperDownReason) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[3]
}

func (x IfOperDownReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfOperDownReason.Descriptor instead.
func (IfOperDownReason) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{3}
}

// *
// Represents interface ethernet port speed. Corresponds to yang values
type IfEthernetPortSpeedType int32

const (
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_UNSET IfEthernetPortSpeedType = 0 // Speed unknown
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_10M   IfEthernetPortSpeedType = 1
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_100M  IfEthernetPortSpeedType = 2
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_1G    IfEthernetPortSpeedType = 3
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_10G   IfEthernetPortSpeedType = 4
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_25G   IfEthernetPortSpeedType = 5
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_40G   IfEthernetPortSpeedType = 6
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_50G   IfEthernetPortSpeedType = 7
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_100G  IfEthernetPortSpeedType = 8
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_200G  IfEthernetPortSpeedType = 9
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_400G  IfEthernetPortSpeedType = 10
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_1T    IfEthernetPortSpeedType = 11
	IfEthernetPortSpeedType_IF_ETH_PORT_SPEED_800G  IfEthernetPortSpeedType = 12
)

// Enum value maps for IfEthernetPortSpeedType.
var (
	IfEthernetPortSpeedType_name = map[int32]string{
		0:  "IF_ETH_PORT_SPEED_UNSET",
		1:  "IF_ETH_PORT_SPEED_10M",
		2:  "IF_ETH_PORT_SPEED_100M",
		3:  "IF_ETH_PORT_SPEED_1G",
		4:  "IF_ETH_PORT_SPEED_10G",
		5:  "IF_ETH_PORT_SPEED_25G",
		6:  "IF_ETH_PORT_SPEED_40G",
		7:  "IF_ETH_PORT_SPEED_50G",
		8:  "IF_ETH_PORT_SPEED_100G",
		9:  "IF_ETH_PORT_SPEED_200G",
		10: "IF_ETH_PORT_SPEED_400G",
		11: "IF_ETH_PORT_SPEED_1T",
		12: "IF_ETH_PORT_SPEED_800G",
	}
	IfEthernetPortSpeedType_value = map[string]int32{
		"IF_ETH_PORT_SPEED_UNSET": 0,
		"IF_ETH_PORT_SPEED_10M":   1,
		"IF_ETH_PORT_SPEED_100M":  2,
		"IF_ETH_PORT_SPEED_1G":    3,
		"IF_ETH_PORT_SPEED_10G":   4,
		"IF_ETH_PORT_SPEED_25G":   5,
		"IF_ETH_PORT_SPEED_40G":   6,
		"IF_ETH_PORT_SPEED_50G":   7,
		"IF_ETH_PORT_SPEED_100G":  8,
		"IF_ETH_PORT_SPEED_200G":  9,
		"IF_ETH_PORT_SPEED_400G":  10,
		"IF_ETH_PORT_SPEED_1T":    11,
		"IF_ETH_PORT_SPEED_800G":  12,
	}
)

func (x IfEthernetPortSpeedType) Enum() *IfEthernetPortSpeedType {
	p := new(IfEthernetPortSpeedType)
	*p = x
	return p
}

func (x IfEthernetPortSpeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfEthernetPortSpeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[4].Descriptor()
}

func (IfEthernetPortSpeedType) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[4]
}

func (x IfEthernetPortSpeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfEthernetPortSpeedType.Descriptor instead.
func (IfEthernetPortSpeedType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{4}
}

// *
// Represents interface ethernet duplex mode. Corresponds to yang values
type IfEthernetDuplexModeType int32

const (
	IfEthernetDuplexModeType_IF_ETH_DUPLEX_MODE_UNSET IfEthernetDuplexModeType = 0 // duplex mode not supported
	IfEthernetDuplexModeType_IF_ETH_DUPLEX_MODE_FULL  IfEthernetDuplexModeType = 1
	IfEthernetDuplexModeType_IF_ETH_DUPLEX_MODE_HALF  IfEthernetDuplexModeType = 2
)

// Enum value maps for IfEthernetDuplexModeType.
var (
	IfEthernetDuplexModeType_name = map[int32]string{
		0: "IF_ETH_DUPLEX_MODE_UNSET",
		1: "IF_ETH_DUPLEX_MODE_FULL",
		2: "IF_ETH_DUPLEX_MODE_HALF",
	}
	IfEthernetDuplexModeType_value = map[string]int32{
		"IF_ETH_DUPLEX_MODE_UNSET": 0,
		"IF_ETH_DUPLEX_MODE_FULL":  1,
		"IF_ETH_DUPLEX_MODE_HALF":  2,
	}
)

func (x IfEthernetDuplexModeType) Enum() *IfEthernetDuplexModeType {
	p := new(IfEthernetDuplexModeType)
	*p = x
	return p
}

func (x IfEthernetDuplexModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfEthernetDuplexModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[5].Descriptor()
}

func (IfEthernetDuplexModeType) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[5]
}

func (x IfEthernetDuplexModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfEthernetDuplexModeType.Descriptor instead.
func (IfEthernetDuplexModeType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{5}
}

// *
// Represents interface loopback mode. Corresponds to yang values
type IfLoopbackModeType int32

const (
	IfLoopbackModeType_IF_LOOPBACK_MODE_UNSET    IfLoopbackModeType = 0 // loopback mode not supported
	IfLoopbackModeType_IF_LOOPBACK_MODE_NONE     IfLoopbackModeType = 1
	IfLoopbackModeType_IF_LOOPBACK_MODE_FACILITY IfLoopbackModeType = 2
	IfLoopbackModeType_IF_LOOPBACK_MODE_TERMINAL IfLoopbackModeType = 3
)

// Enum value maps for IfLoopbackModeType.
var (
	IfLoopbackModeType_name = map[int32]string{
		0: "IF_LOOPBACK_MODE_UNSET",
		1: "IF_LOOPBACK_MODE_NONE",
		2: "IF_LOOPBACK_MODE_FACILITY",
		3: "IF_LOOPBACK_MODE_TERMINAL",
	}
	IfLoopbackModeType_value = map[string]int32{
		"IF_LOOPBACK_MODE_UNSET":    0,
		"IF_LOOPBACK_MODE_NONE":     1,
		"IF_LOOPBACK_MODE_FACILITY": 2,
		"IF_LOOPBACK_MODE_TERMINAL": 3,
	}
)

func (x IfLoopbackModeType) Enum() *IfLoopbackModeType {
	p := new(IfLoopbackModeType)
	*p = x
	return p
}

func (x IfLoopbackModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfLoopbackModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[6].Descriptor()
}

func (IfLoopbackModeType) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[6]
}

func (x IfLoopbackModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfLoopbackModeType.Descriptor instead.
func (IfLoopbackModeType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{6}
}

// *
// Represents interface transceiver fec. Corresponds to yang values
type IfTransceiverFecType int32

const (
	IfTransceiverFecType_IF_TRANS_FEC_UNSET       IfTransceiverFecType = 0 // Fec unknown
	IfTransceiverFecType_IF_TRANS_FEC_DISABLED    IfTransceiverFecType = 1
	IfTransceiverFecType_IF_TRANS_FEC_RS528       IfTransceiverFecType = 2
	IfTransceiverFecType_IF_TRANS_FEC_RS544       IfTransceiverFecType = 3 // Deprecated as a state value, but still used by devmgr/txr code to represent any rs544 flavor
	IfTransceiverFecType_IF_TRANS_FEC_BASER       IfTransceiverFecType = 4
	IfTransceiverFecType_IF_TRANS_FEC_RS108       IfTransceiverFecType = 5
	IfTransceiverFecType_IF_TRANS_FEC_CL91_RS544  IfTransceiverFecType = 6
	IfTransceiverFecType_IF_TRANS_FEC_CL119_RS544 IfTransceiverFecType = 7
	IfTransceiverFecType_IF_TRANS_FEC_CL134_RS544 IfTransceiverFecType = 8
)

// Enum value maps for IfTransceiverFecType.
var (
	IfTransceiverFecType_name = map[int32]string{
		0: "IF_TRANS_FEC_UNSET",
		1: "IF_TRANS_FEC_DISABLED",
		2: "IF_TRANS_FEC_RS528",
		3: "IF_TRANS_FEC_RS544",
		4: "IF_TRANS_FEC_BASER",
		5: "IF_TRANS_FEC_RS108",
		6: "IF_TRANS_FEC_CL91_RS544",
		7: "IF_TRANS_FEC_CL119_RS544",
		8: "IF_TRANS_FEC_CL134_RS544",
	}
	IfTransceiverFecType_value = map[string]int32{
		"IF_TRANS_FEC_UNSET":       0,
		"IF_TRANS_FEC_DISABLED":    1,
		"IF_TRANS_FEC_RS528":       2,
		"IF_TRANS_FEC_RS544":       3,
		"IF_TRANS_FEC_BASER":       4,
		"IF_TRANS_FEC_RS108":       5,
		"IF_TRANS_FEC_CL91_RS544":  6,
		"IF_TRANS_FEC_CL119_RS544": 7,
		"IF_TRANS_FEC_CL134_RS544": 8,
	}
)

func (x IfTransceiverFecType) Enum() *IfTransceiverFecType {
	p := new(IfTransceiverFecType)
	*p = x
	return p
}

func (x IfTransceiverFecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IfTransceiverFecType) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[7].Descriptor()
}

func (IfTransceiverFecType) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[7]
}

func (x IfTransceiverFecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IfTransceiverFecType.Descriptor instead.
func (IfTransceiverFecType) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{7}
}

// *
// Represents enumeration value for operation in subscription.
type SdkMgrOperation int32

const (
	SdkMgrOperation_SDK_MGR_OPERATION_CREATE           SdkMgrOperation = 0 // Create operation; returned if caching is enabled
	SdkMgrOperation_SDK_MGR_OPERATION_UPDATE           SdkMgrOperation = 1 // Update operation; returned if caching is enabled
	SdkMgrOperation_SDK_MGR_OPERATION_DELETE           SdkMgrOperation = 2 // Delete operation
	SdkMgrOperation_SDK_MGR_OPERATION_CREATE_OR_UPDATE SdkMgrOperation = 3 // returned if caching is disabled; App can cache streaming data, if needed.
)

// Enum value maps for SdkMgrOperation.
var (
	SdkMgrOperation_name = map[int32]string{
		0: "SDK_MGR_OPERATION_CREATE",
		1: "SDK_MGR_OPERATION_UPDATE",
		2: "SDK_MGR_OPERATION_DELETE",
		3: "SDK_MGR_OPERATION_CREATE_OR_UPDATE",
	}
	SdkMgrOperation_value = map[string]int32{
		"SDK_MGR_OPERATION_CREATE":           0,
		"SDK_MGR_OPERATION_UPDATE":           1,
		"SDK_MGR_OPERATION_DELETE":           2,
		"SDK_MGR_OPERATION_CREATE_OR_UPDATE": 3,
	}
)

func (x SdkMgrOperation) Enum() *SdkMgrOperation {
	p := new(SdkMgrOperation)
	*p = x
	return p
}

func (x SdkMgrOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkMgrOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[8].Descriptor()
}

func (SdkMgrOperation) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[8]
}

func (x SdkMgrOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkMgrOperation.Descriptor instead.
func (SdkMgrOperation) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{8}
}

// *
// Represents status of network programming service calls.
type SdkMgrStatus int32

const (
	SdkMgrStatus_SDK_MGR_STATUS_SUCCESS SdkMgrStatus = 0 // Successful service call
	SdkMgrStatus_SDK_MGR_STATUS_FAILED  SdkMgrStatus = 1 // Failed service call
)

// Enum value maps for SdkMgrStatus.
var (
	SdkMgrStatus_name = map[int32]string{
		0: "SDK_MGR_STATUS_SUCCESS",
		1: "SDK_MGR_STATUS_FAILED",
	}
	SdkMgrStatus_value = map[string]int32{
		"SDK_MGR_STATUS_SUCCESS": 0,
		"SDK_MGR_STATUS_FAILED":  1,
	}
)

func (x SdkMgrStatus) Enum() *SdkMgrStatus {
	p := new(SdkMgrStatus)
	*p = x
	return p
}

func (x SdkMgrStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdkMgrStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[9].Descriptor()
}

func (SdkMgrStatus) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[9]
}

func (x SdkMgrStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdkMgrStatus.Descriptor instead.
func (SdkMgrStatus) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{9}
}

// *
// Various reasons for port being operationally down.
type PortOperDownReason int32

const (
	PortOperDownReason_PORT_OPER_DOWN_NONE                      PortOperDownReason = 0
	PortOperDownReason_PORT_OPER_DOWN_PORT_ADMIN_DISABLED       PortOperDownReason = 1  // Admin disabled (out of service). E.g lanes not created in physical layer devices
	PortOperDownReason_PORT_OPER_DOWN_PORT_OPER_DISABLED        PortOperDownReason = 2  // Admin enabled but operationally disabled. E.g lanes created but serdes are off
	PortOperDownReason_PORT_OPER_DOWN_MDA_DISABLED              PortOperDownReason = 3  // Parent MDA is disabled
	PortOperDownReason_PORT_OPER_DOWN_MDA_FAILED                PortOperDownReason = 4  // Parent MDA failed
	PortOperDownReason_PORT_OPER_DOWN_LINK_DOWN                 PortOperDownReason = 5  // Operationally enabled but link/carrier down
	PortOperDownReason_PORT_OPER_DOWN_TRANS_NOT_PRESENT         PortOperDownReason = 6  // Transceiver is not plugged in or is dead (undetected)
	PortOperDownReason_PORT_OPER_DOWN_TRANS_LASER_DISABLED      PortOperDownReason = 7  // Transceiver laser is disabled
	PortOperDownReason_PORT_OPER_DOWN_INCOMPATIBLE_CONNECTOR    PortOperDownReason = 8  // Parent connector configuration does not match with this breakout port
	PortOperDownReason_PORT_OPER_DOWN_PHY_UNSUPPORTED_FEC_CFG   PortOperDownReason = 9  // A physical layer device on the port does not support configured FEC
	PortOperDownReason_PORT_OPER_DOWN_PHY_UNSUPPORTED_TRANS_FEC PortOperDownReason = 10 // A physical layer device on the port does not support FEC configured on the transceiver
	PortOperDownReason_PORT_OPER_DOWN_PHY_INTERNAL_FEC_ISSUE    PortOperDownReason = 11 // A physical layer device has internal/hardware problem on employing FEC
	PortOperDownReason_PORT_OPER_DOWN_UNSUPPORTED_BREAKOUT      PortOperDownReason = 12 // Connector does not support the configured breakout mode.
)

// Enum value maps for PortOperDownReason.
var (
	PortOperDownReason_name = map[int32]string{
		0:  "PORT_OPER_DOWN_NONE",
		1:  "PORT_OPER_DOWN_PORT_ADMIN_DISABLED",
		2:  "PORT_OPER_DOWN_PORT_OPER_DISABLED",
		3:  "PORT_OPER_DOWN_MDA_DISABLED",
		4:  "PORT_OPER_DOWN_MDA_FAILED",
		5:  "PORT_OPER_DOWN_LINK_DOWN",
		6:  "PORT_OPER_DOWN_TRANS_NOT_PRESENT",
		7:  "PORT_OPER_DOWN_TRANS_LASER_DISABLED",
		8:  "PORT_OPER_DOWN_INCOMPATIBLE_CONNECTOR",
		9:  "PORT_OPER_DOWN_PHY_UNSUPPORTED_FEC_CFG",
		10: "PORT_OPER_DOWN_PHY_UNSUPPORTED_TRANS_FEC",
		11: "PORT_OPER_DOWN_PHY_INTERNAL_FEC_ISSUE",
		12: "PORT_OPER_DOWN_UNSUPPORTED_BREAKOUT",
	}
	PortOperDownReason_value = map[string]int32{
		"PORT_OPER_DOWN_NONE":                      0,
		"PORT_OPER_DOWN_PORT_ADMIN_DISABLED":       1,
		"PORT_OPER_DOWN_PORT_OPER_DISABLED":        2,
		"PORT_OPER_DOWN_MDA_DISABLED":              3,
		"PORT_OPER_DOWN_MDA_FAILED":                4,
		"PORT_OPER_DOWN_LINK_DOWN":                 5,
		"PORT_OPER_DOWN_TRANS_NOT_PRESENT":         6,
		"PORT_OPER_DOWN_TRANS_LASER_DISABLED":      7,
		"PORT_OPER_DOWN_INCOMPATIBLE_CONNECTOR":    8,
		"PORT_OPER_DOWN_PHY_UNSUPPORTED_FEC_CFG":   9,
		"PORT_OPER_DOWN_PHY_UNSUPPORTED_TRANS_FEC": 10,
		"PORT_OPER_DOWN_PHY_INTERNAL_FEC_ISSUE":    11,
		"PORT_OPER_DOWN_UNSUPPORTED_BREAKOUT":      12,
	}
)

func (x PortOperDownReason) Enum() *PortOperDownReason {
	p := new(PortOperDownReason)
	*p = x
	return p
}

func (x PortOperDownReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortOperDownReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[10].Descriptor()
}

func (PortOperDownReason) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[10]
}

func (x PortOperDownReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortOperDownReason.Descriptor instead.
func (PortOperDownReason) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{10}
}

// *
// Various warnings on port while it stays operational.
type PortWarningReason int32

const (
	PortWarningReason_PORT_WARNING_NONE                        PortWarningReason = 0
	PortWarningReason_PORT_WARNING_TRANS_RX_LOS                PortWarningReason = 1 // Transceiver reported RxLos
	PortWarningReason_PORT_WARNING_TRANS_UNSUPPORTED_SYNCE_CFG PortWarningReason = 2 // Transceiver does not support synce configuration (e.g cannot do clock squelching on RxLos)
	PortWarningReason_PORT_WARNING_PHY_UNSUPPORTED_SYNCE_CFG   PortWarningReason = 3 // A physical layer device does not support synce configuration
	PortWarningReason_PORT_WARNING_PHY_UNSUPPORTED_PTP_CFG     PortWarningReason = 4 // A physical layer device does not support PTP configuration
)

// Enum value maps for PortWarningReason.
var (
	PortWarningReason_name = map[int32]string{
		0: "PORT_WARNING_NONE",
		1: "PORT_WARNING_TRANS_RX_LOS",
		2: "PORT_WARNING_TRANS_UNSUPPORTED_SYNCE_CFG",
		3: "PORT_WARNING_PHY_UNSUPPORTED_SYNCE_CFG",
		4: "PORT_WARNING_PHY_UNSUPPORTED_PTP_CFG",
	}
	PortWarningReason_value = map[string]int32{
		"PORT_WARNING_NONE":                        0,
		"PORT_WARNING_TRANS_RX_LOS":                1,
		"PORT_WARNING_TRANS_UNSUPPORTED_SYNCE_CFG": 2,
		"PORT_WARNING_PHY_UNSUPPORTED_SYNCE_CFG":   3,
		"PORT_WARNING_PHY_UNSUPPORTED_PTP_CFG":     4,
	}
)

func (x PortWarningReason) Enum() *PortWarningReason {
	p := new(PortWarningReason)
	*p = x
	return p
}

func (x PortWarningReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortWarningReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_common_proto_enumTypes[11].Descriptor()
}

func (PortWarningReason) Type() protoreflect.EnumType {
	return &file_ndk_sdk_common_proto_enumTypes[11]
}

func (x PortWarningReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortWarningReason.Descriptor instead.
func (PortWarningReason) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{11}
}

// *
// Represents IP address.
type IpAddressPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress []byte `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"` // IP address
}

func (x *IpAddressPb) Reset() {
	*x = IpAddressPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddressPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddressPb) ProtoMessage() {}

func (x *IpAddressPb) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddressPb.ProtoReflect.Descriptor instead.
func (*IpAddressPb) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{0}
}

func (x *IpAddressPb) GetIpAddress() []byte {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// *
// Represents IP prefix.
type IpAddrPrefLenPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddr       *IpAddressPb `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`                    // IP address
	PrefixLength uint32       `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"` // IP address prefix length
}

func (x *IpAddrPrefLenPb) Reset() {
	*x = IpAddrPrefLenPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAddrPrefLenPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAddrPrefLenPb) ProtoMessage() {}

func (x *IpAddrPrefLenPb) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAddrPrefLenPb.ProtoReflect.Descriptor instead.
func (*IpAddrPrefLenPb) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{1}
}

func (x *IpAddrPrefLenPb) GetIpAddr() *IpAddressPb {
	if x != nil {
		return x.IpAddr
	}
	return nil
}

func (x *IpAddrPrefLenPb) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

// *
// Represents IP prefix state.
type IpInterfaceAddrPrefixPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix *IpAddrPrefLenPb `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`                                // IP prefix
	State  IpAddressState   `protobuf:"varint,2,opt,name=state,proto3,enum=srlinux.sdk.IpAddressState" json:"state,omitempty"` // IP prefix state
}

func (x *IpInterfaceAddrPrefixPb) Reset() {
	*x = IpInterfaceAddrPrefixPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpInterfaceAddrPrefixPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpInterfaceAddrPrefixPb) ProtoMessage() {}

func (x *IpInterfaceAddrPrefixPb) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpInterfaceAddrPrefixPb.ProtoReflect.Descriptor instead.
func (*IpInterfaceAddrPrefixPb) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{2}
}

func (x *IpInterfaceAddrPrefixPb) GetPrefix() *IpAddrPrefLenPb {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *IpInterfaceAddrPrefixPb) GetState() IpAddressState {
	if x != nil {
		return x.State
	}
	return IpAddressState_IPADDR_STATE_UNKNOWN
}

// *
// Represents MAC address.
type MacAddressPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress []byte `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"` // MAC address
}

func (x *MacAddressPb) Reset() {
	*x = MacAddressPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacAddressPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAddressPb) ProtoMessage() {}

func (x *MacAddressPb) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAddressPb.ProtoReflect.Descriptor instead.
func (*MacAddressPb) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{3}
}

func (x *MacAddressPb) GetMacAddress() []byte {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

// *
// Represents global interface identifier.
type GlobalIfId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalIfId uint32 `protobuf:"varint,1,opt,name=global_if_id,json=globalIfId,proto3" json:"global_if_id,omitempty"` // Global interface identifier
}

func (x *GlobalIfId) Reset() {
	*x = GlobalIfId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalIfId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalIfId) ProtoMessage() {}

func (x *GlobalIfId) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalIfId.ProtoReflect.Descriptor instead.
func (*GlobalIfId) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{4}
}

func (x *GlobalIfId) GetGlobalIfId() uint32 {
	if x != nil {
		return x.GlobalIfId
	}
	return 0
}

// *
// Represents network instance identifier.
type NetInstanceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId uint32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // Network instance identifier
}

func (x *NetInstanceId) Reset() {
	*x = NetInstanceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInstanceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInstanceId) ProtoMessage() {}

func (x *NetInstanceId) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInstanceId.ProtoReflect.Descriptor instead.
func (*NetInstanceId) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{5}
}

func (x *NetInstanceId) GetInstanceId() uint32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

// *
// Represents port identifier.
type PortIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId uint64 `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"` // Port identifier
}

func (x *PortIdPb) Reset() {
	*x = PortIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortIdPb) ProtoMessage() {}

func (x *PortIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortIdPb.ProtoReflect.Descriptor instead.
func (*PortIdPb) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{6}
}

func (x *PortIdPb) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

// *
// Represents MPLS label.
type MplsLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsLabel uint32 `protobuf:"varint,1,opt,name=mpls_label,json=mplsLabel,proto3" json:"mpls_label,omitempty"` // MPLS label
}

func (x *MplsLabel) Reset() {
	*x = MplsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsLabel) ProtoMessage() {}

func (x *MplsLabel) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsLabel.ProtoReflect.Descriptor instead.
func (*MplsLabel) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{7}
}

func (x *MplsLabel) GetMplsLabel() uint32 {
	if x != nil {
		return x.MplsLabel
	}
	return 0
}

// *
// Empty message from agent.
type AgentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentReply) Reset() {
	*x = AgentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentReply) ProtoMessage() {}

func (x *AgentReply) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentReply.ProtoReflect.Descriptor instead.
func (*AgentReply) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{8}
}

// *
// Empty message for synchronization request.
type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{9}
}

// *
// Empty message for synchronization end.
type SyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   SdkMgrStatus `protobuf:"varint,1,opt,name=status,proto3,enum=srlinux.sdk.SdkMgrStatus" json:"status,omitempty"` // Error code
	ErrorStr string       `protobuf:"bytes,2,opt,name=error_str,json=errorStr,proto3" json:"error_str,omitempty"`            // Detailed error string
}

func (x *SyncResponse) Reset() {
	*x = SyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResponse) ProtoMessage() {}

func (x *SyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResponse.ProtoReflect.Descriptor instead.
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{10}
}

func (x *SyncResponse) GetStatus() SdkMgrStatus {
	if x != nil {
		return x.Status
	}
	return SdkMgrStatus_SDK_MGR_STATUS_SUCCESS
}

func (x *SyncResponse) GetErrorStr() string {
	if x != nil {
		return x.ErrorStr
	}
	return ""
}

type EvpnEthSegIdPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EsId []byte `protobuf:"bytes,1,opt,name=es_id,json=esId,proto3" json:"es_id,omitempty"` //Type 0 for now. hard-coded id
}

func (x *EvpnEthSegIdPb) Reset() {
	*x = EvpnEthSegIdPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvpnEthSegIdPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvpnEthSegIdPb) ProtoMessage() {}

func (x *EvpnEthSegIdPb) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvpnEthSegIdPb.ProtoReflect.Descriptor instead.
func (*EvpnEthSegIdPb) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_common_proto_rawDescGZIP(), []int{11}
}

func (x *EvpnEthSegIdPb) GetEsId() []byte {
	if x != nil {
		return x.EsId
	}
	return nil
}

var File_ndk_sdk_common_proto protoreflect.FileDescriptor

var file_ndk_sdk_common_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6e, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e,
	0x73, 0x64, 0x6b, 0x22, 0x2c, 0x0a, 0x0b, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x69, 0x0a, 0x0f, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66, 0x4c,
	0x65, 0x6e, 0x50, 0x62, 0x12, 0x31, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x62, 0x52,
	0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x82, 0x01, 0x0a,
	0x17, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x62, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x4c, 0x65, 0x6e, 0x50, 0x62, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x31,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x2f, 0x0a, 0x0c, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x2e, 0x0a, 0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x66, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x66,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x50, 0x62,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x09, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x70, 0x6c, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x0c, 0x0a, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x5e, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x53, 0x64, 0x6b, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x22, 0x25, 0x0a, 0x0e, 0x45, 0x76, 0x70, 0x6e, 0x45, 0x74, 0x68, 0x53, 0x65, 0x67,
	0x49, 0x64, 0x50, 0x62, 0x12, 0x13, 0x0a, 0x05, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x73, 0x49, 0x64, 0x2a, 0xad, 0x01, 0x0a, 0x0b, 0x49, 0x66,
	0x4d, 0x67, 0x72, 0x49, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x4f, 0x50, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x42, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x49, 0x46,
	0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x4b, 0x4c, 0x49, 0x46, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x4b, 0x56, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x46, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0c, 0x2a, 0xbb, 0x01, 0x0a, 0x0e, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49,
	0x50, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xd3, 0x01, 0x0a, 0x0f, 0x49, 0x66, 0x4f, 0x70,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x46, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x46,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x46, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x2a, 0xab, 0x09,
	0x0a, 0x10, 0x49, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x46, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x4d, 0x44, 0x41, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4c, 0x41, 0x53, 0x45, 0x52,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x44, 0x41, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d,
	0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x4d, 0x54, 0x55, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x08, 0x12,
	0x22, 0x0a, 0x1e, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x43, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c,
	0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x10, 0x0e, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4d,
	0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c,
	0x44, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x5f, 0x39, 0x5f, 0x31, 0x32, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x4d,
	0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x46, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x46, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x12,
	0x12, 0x22, 0x0a, 0x1e, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49,
	0x4e, 0x47, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55,
	0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x46,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x15, 0x12,
	0x1f, 0x0a, 0x1b, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x16,
	0x12, 0x22, 0x0a, 0x1e, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x52, 0x10, 0x18, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x4f, 0x55, 0x54, 0x10, 0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x49,
	0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x46, 0x4d, 0x5f,
	0x43, 0x43, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x43, 0x54, 0x10, 0x1a, 0x12, 0x24, 0x0a, 0x20,
	0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x52, 0x43,
	0x5f, 0x4d, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48,
	0x10, 0x1b, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x10, 0x1c, 0x12, 0x25, 0x0a, 0x21, 0x49,
	0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x1e, 0x12,
	0x25, 0x0a, 0x21, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x33, 0x0a, 0x2f, 0x49, 0x46, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x20, 0x2a, 0xfd, 0x02, 0x0a, 0x17,
	0x49, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x46, 0x5f, 0x45, 0x54,
	0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x4d, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x4d, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x31, 0x47, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x47, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x5f, 0x34, 0x30, 0x47, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x30, 0x47, 0x10,
	0x07, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x10, 0x08, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x46, 0x5f,
	0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34,
	0x30, 0x30, 0x47, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x54, 0x10, 0x0b, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x38, 0x30, 0x30, 0x47, 0x10, 0x0c, 0x2a, 0x72, 0x0a, 0x18, 0x49,
	0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x46, 0x5f, 0x45, 0x54,
	0x48, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x46, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x44, 0x55, 0x50,
	0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x02, 0x2a,
	0x89, 0x01, 0x0a, 0x12, 0x49, 0x66, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x46, 0x5f, 0x4c, 0x4f, 0x4f,
	0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x46, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x49, 0x46, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x49, 0x46, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x82, 0x02, 0x0a, 0x14,
	0x49, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x46, 0x65, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x5f, 0x46, 0x45, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x52, 0x53, 0x35, 0x32, 0x38, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x43, 0x5f,
	0x52, 0x53, 0x35, 0x34, 0x34, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x43, 0x5f,
	0x52, 0x53, 0x31, 0x30, 0x38, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x4c, 0x39, 0x31, 0x5f, 0x52, 0x53, 0x35,
	0x34, 0x34, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x5f, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x4c, 0x31, 0x31, 0x39, 0x5f, 0x52, 0x53, 0x35, 0x34, 0x34,
	0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x46,
	0x45, 0x43, 0x5f, 0x43, 0x4c, 0x31, 0x33, 0x34, 0x5f, 0x52, 0x53, 0x35, 0x34, 0x34, 0x10, 0x08,
	0x2a, 0x93, 0x01, 0x0a, 0x0f, 0x53, 0x64, 0x6b, 0x4d, 0x67, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x44, 0x4b, 0x5f, 0x4d, 0x47, 0x52, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x44, 0x4b, 0x5f, 0x4d, 0x47, 0x52, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x44, 0x4b, 0x5f, 0x4d, 0x47, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x26,
	0x0a, 0x22, 0x53, 0x44, 0x4b, 0x5f, 0x4d, 0x47, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x0c, 0x53, 0x64, 0x6b, 0x4d, 0x67, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x44, 0x4b, 0x5f, 0x4d, 0x47,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x44, 0x4b, 0x5f, 0x4d, 0x47, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x82, 0x04,
	0x0a, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4d,
	0x44, 0x41, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x4d, 0x44, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x06,
	0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x4c, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x46, 0x47, 0x10, 0x09,
	0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x46, 0x45, 0x43, 0x10, 0x0a, 0x12, 0x29,
	0x0a, 0x25, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x45,
	0x43, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x4f, 0x55, 0x54,
	0x10, 0x0c, 0x2a, 0xcd, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4c, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x2c,
	0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x46, 0x47, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x45, 0x5f, 0x43, 0x46, 0x47, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x54, 0x50, 0x5f, 0x43, 0x46, 0x47,
	0x10, 0x04, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x6f, 0x6b, 0x69, 0x61, 0x2f, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2d, 0x6e,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x6e, 0x64, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ndk_sdk_common_proto_rawDescOnce sync.Once
	file_ndk_sdk_common_proto_rawDescData = file_ndk_sdk_common_proto_rawDesc
)

func file_ndk_sdk_common_proto_rawDescGZIP() []byte {
	file_ndk_sdk_common_proto_rawDescOnce.Do(func() {
		file_ndk_sdk_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_ndk_sdk_common_proto_rawDescData)
	})
	return file_ndk_sdk_common_proto_rawDescData
}

var file_ndk_sdk_common_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_ndk_sdk_common_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ndk_sdk_common_proto_goTypes = []interface{}{
	(IfMgrIfType)(0),                // 0: srlinux.sdk.IfMgrIfType
	(IpAddressState)(0),             // 1: srlinux.sdk.IpAddressState
	(IfOperStateType)(0),            // 2: srlinux.sdk.IfOperStateType
	(IfOperDownReason)(0),           // 3: srlinux.sdk.IfOperDownReason
	(IfEthernetPortSpeedType)(0),    // 4: srlinux.sdk.IfEthernetPortSpeedType
	(IfEthernetDuplexModeType)(0),   // 5: srlinux.sdk.IfEthernetDuplexModeType
	(IfLoopbackModeType)(0),         // 6: srlinux.sdk.IfLoopbackModeType
	(IfTransceiverFecType)(0),       // 7: srlinux.sdk.IfTransceiverFecType
	(SdkMgrOperation)(0),            // 8: srlinux.sdk.SdkMgrOperation
	(SdkMgrStatus)(0),               // 9: srlinux.sdk.SdkMgrStatus
	(PortOperDownReason)(0),         // 10: srlinux.sdk.PortOperDownReason
	(PortWarningReason)(0),          // 11: srlinux.sdk.PortWarningReason
	(*IpAddressPb)(nil),             // 12: srlinux.sdk.IpAddressPb
	(*IpAddrPrefLenPb)(nil),         // 13: srlinux.sdk.IpAddrPrefLenPb
	(*IpInterfaceAddrPrefixPb)(nil), // 14: srlinux.sdk.IpInterfaceAddrPrefixPb
	(*MacAddressPb)(nil),            // 15: srlinux.sdk.MacAddressPb
	(*GlobalIfId)(nil),              // 16: srlinux.sdk.GlobalIfId
	(*NetInstanceId)(nil),           // 17: srlinux.sdk.NetInstanceId
	(*PortIdPb)(nil),                // 18: srlinux.sdk.PortIdPb
	(*MplsLabel)(nil),               // 19: srlinux.sdk.MplsLabel
	(*AgentReply)(nil),              // 20: srlinux.sdk.AgentReply
	(*SyncRequest)(nil),             // 21: srlinux.sdk.SyncRequest
	(*SyncResponse)(nil),            // 22: srlinux.sdk.SyncResponse
	(*EvpnEthSegIdPb)(nil),          // 23: srlinux.sdk.EvpnEthSegIdPb
}
var file_ndk_sdk_common_proto_depIdxs = []int32{
	12, // 0: srlinux.sdk.IpAddrPrefLenPb.ip_addr:type_name -> srlinux.sdk.IpAddressPb
	13, // 1: srlinux.sdk.IpInterfaceAddrPrefixPb.prefix:type_name -> srlinux.sdk.IpAddrPrefLenPb
	1,  // 2: srlinux.sdk.IpInterfaceAddrPrefixPb.state:type_name -> srlinux.sdk.IpAddressState
	9,  // 3: srlinux.sdk.SyncResponse.status:type_name -> srlinux.sdk.SdkMgrStatus
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_ndk_sdk_common_proto_init() }
func file_ndk_sdk_common_proto_init() {
	if File_ndk_sdk_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ndk_sdk_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddressPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAddrPrefLenPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpInterfaceAddrPrefixPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacAddressPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalIfId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInstanceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvpnEthSegIdPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ndk_sdk_common_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ndk_sdk_common_proto_goTypes,
		DependencyIndexes: file_ndk_sdk_common_proto_depIdxs,
		EnumInfos:         file_ndk_sdk_common_proto_enumTypes,
		MessageInfos:      file_ndk_sdk_common_proto_msgTypes,
	}.Build()
	File_ndk_sdk_common_proto = out.File
	file_ndk_sdk_common_proto_rawDesc = nil
	file_ndk_sdk_common_proto_goTypes = nil
	file_ndk_sdk_common_proto_depIdxs = nil
}
