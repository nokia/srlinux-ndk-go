//*********************************************************************************************************************
//  Description: interface between router agents and SDK service manager
//
//  Copyright (c) 2018 Nokia
//*********************************************************************************************************************

//*
//  Network programming APIs and messages. This is the base layer for agent registration, router event notifications such as interface, LLDP, BFD, and so on; also provides keepalive functionality to detect agent liveliness

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: ndk/sdk_service.proto

package ndk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// Represents notification stream subscription request operation.
type NotificationRegisterRequest_Operation int32

const (
	NotificationRegisterRequest_Create             NotificationRegisterRequest_Operation = 0 // Create a subscription
	NotificationRegisterRequest_Delete             NotificationRegisterRequest_Operation = 1 // Delete all subscriptions
	NotificationRegisterRequest_AddSubscription    NotificationRegisterRequest_Operation = 2 // Add subscription to existing subscriptions
	NotificationRegisterRequest_DeleteSubscription NotificationRegisterRequest_Operation = 3 // Delete one subscription from existing subscriptions
)

// Enum value maps for NotificationRegisterRequest_Operation.
var (
	NotificationRegisterRequest_Operation_name = map[int32]string{
		0: "Create",
		1: "Delete",
		2: "AddSubscription",
		3: "DeleteSubscription",
	}
	NotificationRegisterRequest_Operation_value = map[string]int32{
		"Create":             0,
		"Delete":             1,
		"AddSubscription":    2,
		"DeleteSubscription": 3,
	}
)

func (x NotificationRegisterRequest_Operation) Enum() *NotificationRegisterRequest_Operation {
	p := new(NotificationRegisterRequest_Operation)
	*p = x
	return p
}

func (x NotificationRegisterRequest_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationRegisterRequest_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_ndk_sdk_service_proto_enumTypes[0].Descriptor()
}

func (NotificationRegisterRequest_Operation) Type() protoreflect.EnumType {
	return &file_ndk_sdk_service_proto_enumTypes[0]
}

func (x NotificationRegisterRequest_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationRegisterRequest_Operation.Descriptor instead.
func (NotificationRegisterRequest_Operation) EnumDescriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{6, 0}
}

//*
// Represents registration request message used in agent register and unregister.
type AgentRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsPath          []string `protobuf:"bytes,1,rep,name=js_path,json=jsPath,proto3" json:"js_path,omitempty"`
	AgentLiveliness uint32   `protobuf:"varint,2,opt,name=agent_liveliness,json=agentLiveliness,proto3" json:"agent_liveliness,omitempty"`
}

func (x *AgentRegistrationRequest) Reset() {
	*x = AgentRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRegistrationRequest) ProtoMessage() {}

func (x *AgentRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRegistrationRequest.ProtoReflect.Descriptor instead.
func (*AgentRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{0}
}

func (x *AgentRegistrationRequest) GetJsPath() []string {
	if x != nil {
		return x.JsPath
	}
	return nil
}

func (x *AgentRegistrationRequest) GetAgentLiveliness() uint32 {
	if x != nil {
		return x.AgentLiveliness
	}
	return 0
}

//*
// Represents registration response in reply to registration request.
type AgentRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   SdkMgrStatus `protobuf:"varint,1,opt,name=status,proto3,enum=srlinux.sdk.SdkMgrStatus" json:"status,omitempty"` // Status of the register; for example: kOk, kFailed
	ErrorStr string       `protobuf:"bytes,2,opt,name=error_str,json=errorStr,proto3" json:"error_str,omitempty"`            // Detailed error text
	AppId    uint32       `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                    // Application ID assigned by SDK manager.
}

func (x *AgentRegistrationResponse) Reset() {
	*x = AgentRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRegistrationResponse) ProtoMessage() {}

func (x *AgentRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRegistrationResponse.ProtoReflect.Descriptor instead.
func (*AgentRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{1}
}

func (x *AgentRegistrationResponse) GetStatus() SdkMgrStatus {
	if x != nil {
		return x.Status
	}
	return SdkMgrStatus_kSdkMgrSuccess
}

func (x *AgentRegistrationResponse) GetErrorStr() string {
	if x != nil {
		return x.ErrorStr
	}
	return ""
}

func (x *AgentRegistrationResponse) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

//*
// Represents keep alive request from agent to refresh liveliness of the agent.
type KeepAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeepAliveRequest) Reset() {
	*x = KeepAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveRequest) ProtoMessage() {}

func (x *KeepAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveRequest.ProtoReflect.Descriptor instead.
func (*KeepAliveRequest) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{2}
}

//*
// Represents keepalive response.
type KeepAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SdkMgrStatus `protobuf:"varint,1,opt,name=status,proto3,enum=srlinux.sdk.SdkMgrStatus" json:"status,omitempty"` // Status of keepalive; for example, kOk or kFailed
}

func (x *KeepAliveResponse) Reset() {
	*x = KeepAliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveResponse) ProtoMessage() {}

func (x *KeepAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveResponse.ProtoReflect.Descriptor instead.
func (*KeepAliveResponse) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{3}
}

func (x *KeepAliveResponse) GetStatus() SdkMgrStatus {
	if x != nil {
		return x.Status
	}
	return SdkMgrStatus_kSdkMgrSuccess
}

//*
// Represents application identifier request from agent. All applications are assigned an identifier by IDB.
type AppIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Application name
}

func (x *AppIdRequest) Reset() {
	*x = AppIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIdRequest) ProtoMessage() {}

func (x *AppIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIdRequest.ProtoReflect.Descriptor instead.
func (*AppIdRequest) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{4}
}

func (x *AppIdRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//*
// Represents application identifier response to agent.
type AppIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SdkMgrStatus `protobuf:"varint,1,opt,name=status,proto3,enum=srlinux.sdk.SdkMgrStatus" json:"status,omitempty"` // Status of the call; for example, kOk, kFailed
	Id     uint32       `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                       // Identifier for the given application name
}

func (x *AppIdResponse) Reset() {
	*x = AppIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIdResponse) ProtoMessage() {}

func (x *AppIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIdResponse.ProtoReflect.Descriptor instead.
func (*AppIdResponse) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{5}
}

func (x *AppIdResponse) GetStatus() SdkMgrStatus {
	if x != nil {
		return x.Status
	}
	return SdkMgrStatus_kSdkMgrSuccess
}

func (x *AppIdResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

//*
// Represents notification request from agent. Agent uses this message to subscribe to router events such as interface create, delete, or update, as well as LLDP neighbor create, delete, or update, and so on.
type NotificationRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId uint64                                `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                            // Unset on create, set otherwise
	Op       NotificationRegisterRequest_Operation `protobuf:"varint,2,opt,name=op,proto3,enum=srlinux.sdk.NotificationRegisterRequest_Operation" json:"op,omitempty"` // Specific operation in the notification register request
	SubId    uint64                                `protobuf:"varint,3,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`                                     // Set for delete subscription, unset otherwise
	// Types that are assignable to SubscriptionTypes:
	//	*NotificationRegisterRequest_Intf
	//	*NotificationRegisterRequest_NwInst
	//	*NotificationRegisterRequest_LldpNeighbor
	//	*NotificationRegisterRequest_Config
	//	*NotificationRegisterRequest_BfdSession
	//	*NotificationRegisterRequest_Route
	//	*NotificationRegisterRequest_Appid
	//	*NotificationRegisterRequest_Nhg
	SubscriptionTypes isNotificationRegisterRequest_SubscriptionTypes `protobuf_oneof:"subscription_types"`
}

func (x *NotificationRegisterRequest) Reset() {
	*x = NotificationRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRegisterRequest) ProtoMessage() {}

func (x *NotificationRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRegisterRequest.ProtoReflect.Descriptor instead.
func (*NotificationRegisterRequest) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{6}
}

func (x *NotificationRegisterRequest) GetStreamId() uint64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *NotificationRegisterRequest) GetOp() NotificationRegisterRequest_Operation {
	if x != nil {
		return x.Op
	}
	return NotificationRegisterRequest_Create
}

func (x *NotificationRegisterRequest) GetSubId() uint64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (m *NotificationRegisterRequest) GetSubscriptionTypes() isNotificationRegisterRequest_SubscriptionTypes {
	if m != nil {
		return m.SubscriptionTypes
	}
	return nil
}

func (x *NotificationRegisterRequest) GetIntf() *InterfaceSubscriptionRequest {
	if x, ok := x.GetSubscriptionTypes().(*NotificationRegisterRequest_Intf); ok {
		return x.Intf
	}
	return nil
}

func (x *NotificationRegisterRequest) GetNwInst() *NetworkInstanceSubscriptionRequest {
	if x, ok := x.GetSubscriptionTypes().(*NotificationRegisterRequest_NwInst); ok {
		return x.NwInst
	}
	return nil
}

func (x *NotificationRegisterRequest) GetLldpNeighbor() *LldpNeighborSubscriptionRequest {
	if x, ok := x.GetSubscriptionTypes().(*NotificationRegisterRequest_LldpNeighbor); ok {
		return x.LldpNeighbor
	}
	return nil
}

func (x *NotificationRegisterRequest) GetConfig() *ConfigSubscriptionRequest {
	if x, ok := x.GetSubscriptionTypes().(*NotificationRegisterRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *NotificationRegisterRequest) GetBfdSession() *BfdSessionSubscriptionRequest {
	if x, ok := x.GetSubscriptionTypes().(*NotificationRegisterRequest_BfdSession); ok {
		return x.BfdSession
	}
	return nil
}

func (x *NotificationRegisterRequest) GetRoute() *IpRouteSubscriptionRequest {
	if x, ok := x.GetSubscriptionTypes().(*NotificationRegisterRequest_Route); ok {
		return x.Route
	}
	return nil
}

func (x *NotificationRegisterRequest) GetAppid() *AppIdentSubscriptionRequest {
	if x, ok := x.GetSubscriptionTypes().(*NotificationRegisterRequest_Appid); ok {
		return x.Appid
	}
	return nil
}

func (x *NotificationRegisterRequest) GetNhg() *NextHopGroupSubscriptionRequest {
	if x, ok := x.GetSubscriptionTypes().(*NotificationRegisterRequest_Nhg); ok {
		return x.Nhg
	}
	return nil
}

type isNotificationRegisterRequest_SubscriptionTypes interface {
	isNotificationRegisterRequest_SubscriptionTypes()
}

type NotificationRegisterRequest_Intf struct {
	Intf *InterfaceSubscriptionRequest `protobuf:"bytes,10,opt,name=intf,proto3,oneof"` // Interface subscription request
}

type NotificationRegisterRequest_NwInst struct {
	NwInst *NetworkInstanceSubscriptionRequest `protobuf:"bytes,11,opt,name=nw_inst,json=nwInst,proto3,oneof"` // Network instance subscription request
}

type NotificationRegisterRequest_LldpNeighbor struct {
	LldpNeighbor *LldpNeighborSubscriptionRequest `protobuf:"bytes,12,opt,name=lldp_neighbor,json=lldpNeighbor,proto3,oneof"` // LLDP neighbor subscription request
}

type NotificationRegisterRequest_Config struct {
	Config *ConfigSubscriptionRequest `protobuf:"bytes,13,opt,name=config,proto3,oneof"` // Configuration subscription request
}

type NotificationRegisterRequest_BfdSession struct {
	BfdSession *BfdSessionSubscriptionRequest `protobuf:"bytes,14,opt,name=bfd_session,json=bfdSession,proto3,oneof"` // BFD session subscription request
}

type NotificationRegisterRequest_Route struct {
	Route *IpRouteSubscriptionRequest `protobuf:"bytes,15,opt,name=route,proto3,oneof"` // IP route subscription request
}

type NotificationRegisterRequest_Appid struct {
	Appid *AppIdentSubscriptionRequest `protobuf:"bytes,16,opt,name=appid,proto3,oneof"` // App identification subscription request
}

type NotificationRegisterRequest_Nhg struct {
	Nhg *NextHopGroupSubscriptionRequest `protobuf:"bytes,17,opt,name=nhg,proto3,oneof"` // Nexthop Group subscription request
}

func (*NotificationRegisterRequest_Intf) isNotificationRegisterRequest_SubscriptionTypes() {}

func (*NotificationRegisterRequest_NwInst) isNotificationRegisterRequest_SubscriptionTypes() {}

func (*NotificationRegisterRequest_LldpNeighbor) isNotificationRegisterRequest_SubscriptionTypes() {}

func (*NotificationRegisterRequest_Config) isNotificationRegisterRequest_SubscriptionTypes() {}

func (*NotificationRegisterRequest_BfdSession) isNotificationRegisterRequest_SubscriptionTypes() {}

func (*NotificationRegisterRequest_Route) isNotificationRegisterRequest_SubscriptionTypes() {}

func (*NotificationRegisterRequest_Appid) isNotificationRegisterRequest_SubscriptionTypes() {}

func (*NotificationRegisterRequest_Nhg) isNotificationRegisterRequest_SubscriptionTypes() {}

//*
// Represents notification response.
type NotificationRegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId uint64       `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SubId    uint64       `protobuf:"varint,2,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`                    // Subscription identifier. Each subscription gets an identifier, which can be used to delete a subscription
	Status   SdkMgrStatus `protobuf:"varint,3,opt,name=status,proto3,enum=srlinux.sdk.SdkMgrStatus" json:"status,omitempty"` // Status of subscription
}

func (x *NotificationRegisterResponse) Reset() {
	*x = NotificationRegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationRegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationRegisterResponse) ProtoMessage() {}

func (x *NotificationRegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationRegisterResponse.ProtoReflect.Descriptor instead.
func (*NotificationRegisterResponse) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{7}
}

func (x *NotificationRegisterResponse) GetStreamId() uint64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *NotificationRegisterResponse) GetSubId() uint64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *NotificationRegisterResponse) GetStatus() SdkMgrStatus {
	if x != nil {
		return x.Status
	}
	return SdkMgrStatus_kSdkMgrSuccess
}

//*
// Represents notification query to return specific subscription details.
type NotificationQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // Stream identifier, in NotificationRegisterResponse
}

func (x *NotificationQueryRequest) Reset() {
	*x = NotificationQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationQueryRequest) ProtoMessage() {}

func (x *NotificationQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationQueryRequest.ProtoReflect.Descriptor instead.
func (*NotificationQueryRequest) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{8}
}

func (x *NotificationQueryRequest) GetStreamId() uint64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

//*
// Represents notification subscription.
type NotificationQuerySubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubId       uint64 `protobuf:"varint,1,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"` // Subscription identifier
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`   // Subscription description
}

func (x *NotificationQuerySubscription) Reset() {
	*x = NotificationQuerySubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationQuerySubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationQuerySubscription) ProtoMessage() {}

func (x *NotificationQuerySubscription) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationQuerySubscription.ProtoReflect.Descriptor instead.
func (*NotificationQuerySubscription) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{9}
}

func (x *NotificationQuerySubscription) GetSubId() uint64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *NotificationQuerySubscription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

//*
// Represents notification query response.
type NotificationQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*NotificationQuerySubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`                  // List of subscription details
	Status        SdkMgrStatus                     `protobuf:"varint,2,opt,name=status,proto3,enum=srlinux.sdk.SdkMgrStatus" json:"status,omitempty"` // Status of the query
}

func (x *NotificationQueryResponse) Reset() {
	*x = NotificationQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationQueryResponse) ProtoMessage() {}

func (x *NotificationQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationQueryResponse.ProtoReflect.Descriptor instead.
func (*NotificationQueryResponse) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{10}
}

func (x *NotificationQueryResponse) GetSubscriptions() []*NotificationQuerySubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *NotificationQueryResponse) GetStatus() SdkMgrStatus {
	if x != nil {
		return x.Status
	}
	return SdkMgrStatus_kSdkMgrSuccess
}

//*
// Represents notification stream request.
type NotificationStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // Stream identifier
}

func (x *NotificationStreamRequest) Reset() {
	*x = NotificationStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationStreamRequest) ProtoMessage() {}

func (x *NotificationStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationStreamRequest.ProtoReflect.Descriptor instead.
func (*NotificationStreamRequest) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{11}
}

func (x *NotificationStreamRequest) GetStreamId() uint64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

//*
// Represents notification stream response.
type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubId uint64 `protobuf:"varint,1,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"` // Subscription identifier
	// Types that are assignable to SubscriptionTypes:
	//	*Notification_Intf
	//	*Notification_NwInst
	//	*Notification_LldpNeighbor
	//	*Notification_Config
	//	*Notification_BfdSession
	//	*Notification_Route
	//	*Notification_Appid
	//	*Notification_Nhg
	SubscriptionTypes isNotification_SubscriptionTypes `protobuf_oneof:"subscription_types"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{12}
}

func (x *Notification) GetSubId() uint64 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (m *Notification) GetSubscriptionTypes() isNotification_SubscriptionTypes {
	if m != nil {
		return m.SubscriptionTypes
	}
	return nil
}

func (x *Notification) GetIntf() *InterfaceNotification {
	if x, ok := x.GetSubscriptionTypes().(*Notification_Intf); ok {
		return x.Intf
	}
	return nil
}

func (x *Notification) GetNwInst() *NetworkInstanceNotification {
	if x, ok := x.GetSubscriptionTypes().(*Notification_NwInst); ok {
		return x.NwInst
	}
	return nil
}

func (x *Notification) GetLldpNeighbor() *LldpNeighborNotification {
	if x, ok := x.GetSubscriptionTypes().(*Notification_LldpNeighbor); ok {
		return x.LldpNeighbor
	}
	return nil
}

func (x *Notification) GetConfig() *ConfigNotification {
	if x, ok := x.GetSubscriptionTypes().(*Notification_Config); ok {
		return x.Config
	}
	return nil
}

func (x *Notification) GetBfdSession() *BfdSessionNotification {
	if x, ok := x.GetSubscriptionTypes().(*Notification_BfdSession); ok {
		return x.BfdSession
	}
	return nil
}

func (x *Notification) GetRoute() *IpRouteNotification {
	if x, ok := x.GetSubscriptionTypes().(*Notification_Route); ok {
		return x.Route
	}
	return nil
}

func (x *Notification) GetAppid() *AppIdentNotification {
	if x, ok := x.GetSubscriptionTypes().(*Notification_Appid); ok {
		return x.Appid
	}
	return nil
}

func (x *Notification) GetNhg() *NextHopGroupNotification {
	if x, ok := x.GetSubscriptionTypes().(*Notification_Nhg); ok {
		return x.Nhg
	}
	return nil
}

type isNotification_SubscriptionTypes interface {
	isNotification_SubscriptionTypes()
}

type Notification_Intf struct {
	Intf *InterfaceNotification `protobuf:"bytes,10,opt,name=intf,proto3,oneof"` // Interface details
}

type Notification_NwInst struct {
	NwInst *NetworkInstanceNotification `protobuf:"bytes,11,opt,name=nw_inst,json=nwInst,proto3,oneof"` // Network instance details
}

type Notification_LldpNeighbor struct {
	LldpNeighbor *LldpNeighborNotification `protobuf:"bytes,12,opt,name=lldp_neighbor,json=lldpNeighbor,proto3,oneof"` // LLDP neighbor details
}

type Notification_Config struct {
	Config *ConfigNotification `protobuf:"bytes,13,opt,name=config,proto3,oneof"` // Configuration notification
}

type Notification_BfdSession struct {
	BfdSession *BfdSessionNotification `protobuf:"bytes,14,opt,name=bfd_session,json=bfdSession,proto3,oneof"` // BFD session details
}

type Notification_Route struct {
	Route *IpRouteNotification `protobuf:"bytes,15,opt,name=route,proto3,oneof"` // IP route details
}

type Notification_Appid struct {
	Appid *AppIdentNotification `protobuf:"bytes,16,opt,name=appid,proto3,oneof"` // App identification details
}

type Notification_Nhg struct {
	Nhg *NextHopGroupNotification `protobuf:"bytes,17,opt,name=nhg,proto3,oneof"` // Next-hop group details
}

func (*Notification_Intf) isNotification_SubscriptionTypes() {}

func (*Notification_NwInst) isNotification_SubscriptionTypes() {}

func (*Notification_LldpNeighbor) isNotification_SubscriptionTypes() {}

func (*Notification_Config) isNotification_SubscriptionTypes() {}

func (*Notification_BfdSession) isNotification_SubscriptionTypes() {}

func (*Notification_Route) isNotification_SubscriptionTypes() {}

func (*Notification_Appid) isNotification_SubscriptionTypes() {}

func (*Notification_Nhg) isNotification_SubscriptionTypes() {}

//*
// Represents notification stream response that contains one or more notification.
type NotificationStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification []*Notification `protobuf:"bytes,1,rep,name=notification,proto3" json:"notification,omitempty"` // Notification details
}

func (x *NotificationStreamResponse) Reset() {
	*x = NotificationStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ndk_sdk_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationStreamResponse) ProtoMessage() {}

func (x *NotificationStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ndk_sdk_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationStreamResponse.ProtoReflect.Descriptor instead.
func (*NotificationStreamResponse) Descriptor() ([]byte, []int) {
	return file_ndk_sdk_service_proto_rawDescGZIP(), []int{13}
}

func (x *NotificationStreamResponse) GetNotification() []*Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

var File_ndk_sdk_service_proto protoreflect.FileDescriptor

var file_ndk_sdk_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6e, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x73, 0x64, 0x6b, 0x1a, 0x14, 0x6e, 0x64, 0x6b, 0x2f, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x64, 0x6b, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6e, 0x64, 0x6b, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x6e, 0x64, 0x6b, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6e, 0x64, 0x6b, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6e,
	0x64, 0x6b, 0x2f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x64, 0x6b, 0x2f, 0x62, 0x66, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6e, 0x64,
	0x6b, 0x2f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6e, 0x64, 0x6b, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x18, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x53, 0x64, 0x6b, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x74, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x46, 0x0a, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x53, 0x64, 0x6b, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x22, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x0d, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73,
	0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x64, 0x6b, 0x4d, 0x67,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xb5, 0x06, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x12, 0x4a, 0x0a, 0x07, 0x6e, 0x77, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x72, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x77,
	0x49, 0x6e, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x72,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6c, 0x64,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x72, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x0b, 0x62,
	0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42,
	0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x72, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x72, 0x6c,
	0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x03, 0x6e, 0x68, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x72, 0x6c,
	0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x68, 0x67, 0x22,
	0x50, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x03, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73,
	0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x64, 0x6b, 0x4d, 0x67,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x37, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x53, 0x64, 0x6b, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0xbb, 0x04, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x74,
	0x66, 0x12, 0x43, 0x0a, 0x07, 0x6e, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x6e, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x46, 0x0a, 0x0b, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x66, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41,
	0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x03,
	0x6e, 0x68, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x72, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x03, 0x6e, 0x68, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x5b, 0x0a,
	0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xbd, 0x04, 0x0a, 0x0d, 0x53,
	0x64, 0x6b, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0d,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e,
	0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x73, 0x72, 0x6c,
	0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73,
	0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x83, 0x01, 0x0a, 0x16, 0x53,
	0x64, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x73, 0x72,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e,
	0x6f, 0x6b, 0x69, 0x61, 0x2f, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2d, 0x6e, 0x64, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x6e, 0x64, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ndk_sdk_service_proto_rawDescOnce sync.Once
	file_ndk_sdk_service_proto_rawDescData = file_ndk_sdk_service_proto_rawDesc
)

func file_ndk_sdk_service_proto_rawDescGZIP() []byte {
	file_ndk_sdk_service_proto_rawDescOnce.Do(func() {
		file_ndk_sdk_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_ndk_sdk_service_proto_rawDescData)
	})
	return file_ndk_sdk_service_proto_rawDescData
}

var file_ndk_sdk_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ndk_sdk_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_ndk_sdk_service_proto_goTypes = []interface{}{
	(NotificationRegisterRequest_Operation)(0), // 0: srlinux.sdk.NotificationRegisterRequest.Operation
	(*AgentRegistrationRequest)(nil),           // 1: srlinux.sdk.AgentRegistrationRequest
	(*AgentRegistrationResponse)(nil),          // 2: srlinux.sdk.AgentRegistrationResponse
	(*KeepAliveRequest)(nil),                   // 3: srlinux.sdk.KeepAliveRequest
	(*KeepAliveResponse)(nil),                  // 4: srlinux.sdk.KeepAliveResponse
	(*AppIdRequest)(nil),                       // 5: srlinux.sdk.AppIdRequest
	(*AppIdResponse)(nil),                      // 6: srlinux.sdk.AppIdResponse
	(*NotificationRegisterRequest)(nil),        // 7: srlinux.sdk.NotificationRegisterRequest
	(*NotificationRegisterResponse)(nil),       // 8: srlinux.sdk.NotificationRegisterResponse
	(*NotificationQueryRequest)(nil),           // 9: srlinux.sdk.NotificationQueryRequest
	(*NotificationQuerySubscription)(nil),      // 10: srlinux.sdk.NotificationQuerySubscription
	(*NotificationQueryResponse)(nil),          // 11: srlinux.sdk.NotificationQueryResponse
	(*NotificationStreamRequest)(nil),          // 12: srlinux.sdk.NotificationStreamRequest
	(*Notification)(nil),                       // 13: srlinux.sdk.Notification
	(*NotificationStreamResponse)(nil),         // 14: srlinux.sdk.NotificationStreamResponse
	(SdkMgrStatus)(0),                          // 15: srlinux.sdk.SdkMgrStatus
	(*InterfaceSubscriptionRequest)(nil),       // 16: srlinux.sdk.InterfaceSubscriptionRequest
	(*NetworkInstanceSubscriptionRequest)(nil), // 17: srlinux.sdk.NetworkInstanceSubscriptionRequest
	(*LldpNeighborSubscriptionRequest)(nil),    // 18: srlinux.sdk.LldpNeighborSubscriptionRequest
	(*ConfigSubscriptionRequest)(nil),          // 19: srlinux.sdk.ConfigSubscriptionRequest
	(*BfdSessionSubscriptionRequest)(nil),      // 20: srlinux.sdk.BfdSessionSubscriptionRequest
	(*IpRouteSubscriptionRequest)(nil),         // 21: srlinux.sdk.IpRouteSubscriptionRequest
	(*AppIdentSubscriptionRequest)(nil),        // 22: srlinux.sdk.AppIdentSubscriptionRequest
	(*NextHopGroupSubscriptionRequest)(nil),    // 23: srlinux.sdk.NextHopGroupSubscriptionRequest
	(*InterfaceNotification)(nil),              // 24: srlinux.sdk.InterfaceNotification
	(*NetworkInstanceNotification)(nil),        // 25: srlinux.sdk.NetworkInstanceNotification
	(*LldpNeighborNotification)(nil),           // 26: srlinux.sdk.LldpNeighborNotification
	(*ConfigNotification)(nil),                 // 27: srlinux.sdk.ConfigNotification
	(*BfdSessionNotification)(nil),             // 28: srlinux.sdk.BfdSessionNotification
	(*IpRouteNotification)(nil),                // 29: srlinux.sdk.IpRouteNotification
	(*AppIdentNotification)(nil),               // 30: srlinux.sdk.AppIdentNotification
	(*NextHopGroupNotification)(nil),           // 31: srlinux.sdk.NextHopGroupNotification
}
var file_ndk_sdk_service_proto_depIdxs = []int32{
	15, // 0: srlinux.sdk.AgentRegistrationResponse.status:type_name -> srlinux.sdk.SdkMgrStatus
	15, // 1: srlinux.sdk.KeepAliveResponse.status:type_name -> srlinux.sdk.SdkMgrStatus
	15, // 2: srlinux.sdk.AppIdResponse.status:type_name -> srlinux.sdk.SdkMgrStatus
	0,  // 3: srlinux.sdk.NotificationRegisterRequest.op:type_name -> srlinux.sdk.NotificationRegisterRequest.Operation
	16, // 4: srlinux.sdk.NotificationRegisterRequest.intf:type_name -> srlinux.sdk.InterfaceSubscriptionRequest
	17, // 5: srlinux.sdk.NotificationRegisterRequest.nw_inst:type_name -> srlinux.sdk.NetworkInstanceSubscriptionRequest
	18, // 6: srlinux.sdk.NotificationRegisterRequest.lldp_neighbor:type_name -> srlinux.sdk.LldpNeighborSubscriptionRequest
	19, // 7: srlinux.sdk.NotificationRegisterRequest.config:type_name -> srlinux.sdk.ConfigSubscriptionRequest
	20, // 8: srlinux.sdk.NotificationRegisterRequest.bfd_session:type_name -> srlinux.sdk.BfdSessionSubscriptionRequest
	21, // 9: srlinux.sdk.NotificationRegisterRequest.route:type_name -> srlinux.sdk.IpRouteSubscriptionRequest
	22, // 10: srlinux.sdk.NotificationRegisterRequest.appid:type_name -> srlinux.sdk.AppIdentSubscriptionRequest
	23, // 11: srlinux.sdk.NotificationRegisterRequest.nhg:type_name -> srlinux.sdk.NextHopGroupSubscriptionRequest
	15, // 12: srlinux.sdk.NotificationRegisterResponse.status:type_name -> srlinux.sdk.SdkMgrStatus
	10, // 13: srlinux.sdk.NotificationQueryResponse.subscriptions:type_name -> srlinux.sdk.NotificationQuerySubscription
	15, // 14: srlinux.sdk.NotificationQueryResponse.status:type_name -> srlinux.sdk.SdkMgrStatus
	24, // 15: srlinux.sdk.Notification.intf:type_name -> srlinux.sdk.InterfaceNotification
	25, // 16: srlinux.sdk.Notification.nw_inst:type_name -> srlinux.sdk.NetworkInstanceNotification
	26, // 17: srlinux.sdk.Notification.lldp_neighbor:type_name -> srlinux.sdk.LldpNeighborNotification
	27, // 18: srlinux.sdk.Notification.config:type_name -> srlinux.sdk.ConfigNotification
	28, // 19: srlinux.sdk.Notification.bfd_session:type_name -> srlinux.sdk.BfdSessionNotification
	29, // 20: srlinux.sdk.Notification.route:type_name -> srlinux.sdk.IpRouteNotification
	30, // 21: srlinux.sdk.Notification.appid:type_name -> srlinux.sdk.AppIdentNotification
	31, // 22: srlinux.sdk.Notification.nhg:type_name -> srlinux.sdk.NextHopGroupNotification
	13, // 23: srlinux.sdk.NotificationStreamResponse.notification:type_name -> srlinux.sdk.Notification
	1,  // 24: srlinux.sdk.SdkMgrService.AgentRegister:input_type -> srlinux.sdk.AgentRegistrationRequest
	1,  // 25: srlinux.sdk.SdkMgrService.AgentUnRegister:input_type -> srlinux.sdk.AgentRegistrationRequest
	7,  // 26: srlinux.sdk.SdkMgrService.NotificationRegister:input_type -> srlinux.sdk.NotificationRegisterRequest
	9,  // 27: srlinux.sdk.SdkMgrService.NotificationQuery:input_type -> srlinux.sdk.NotificationQueryRequest
	3,  // 28: srlinux.sdk.SdkMgrService.KeepAlive:input_type -> srlinux.sdk.KeepAliveRequest
	5,  // 29: srlinux.sdk.SdkMgrService.GetAppId:input_type -> srlinux.sdk.AppIdRequest
	12, // 30: srlinux.sdk.SdkNotificationService.NotificationStream:input_type -> srlinux.sdk.NotificationStreamRequest
	2,  // 31: srlinux.sdk.SdkMgrService.AgentRegister:output_type -> srlinux.sdk.AgentRegistrationResponse
	2,  // 32: srlinux.sdk.SdkMgrService.AgentUnRegister:output_type -> srlinux.sdk.AgentRegistrationResponse
	8,  // 33: srlinux.sdk.SdkMgrService.NotificationRegister:output_type -> srlinux.sdk.NotificationRegisterResponse
	11, // 34: srlinux.sdk.SdkMgrService.NotificationQuery:output_type -> srlinux.sdk.NotificationQueryResponse
	4,  // 35: srlinux.sdk.SdkMgrService.KeepAlive:output_type -> srlinux.sdk.KeepAliveResponse
	6,  // 36: srlinux.sdk.SdkMgrService.GetAppId:output_type -> srlinux.sdk.AppIdResponse
	14, // 37: srlinux.sdk.SdkNotificationService.NotificationStream:output_type -> srlinux.sdk.NotificationStreamResponse
	31, // [31:38] is the sub-list for method output_type
	24, // [24:31] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_ndk_sdk_service_proto_init() }
func file_ndk_sdk_service_proto_init() {
	if File_ndk_sdk_service_proto != nil {
		return
	}
	file_ndk_sdk_common_proto_init()
	file_ndk_config_service_proto_init()
	file_ndk_interface_service_proto_init()
	file_ndk_networkinstance_service_proto_init()
	file_ndk_route_service_proto_init()
	file_ndk_lldp_service_proto_init()
	file_ndk_bfd_service_proto_init()
	file_ndk_appid_service_proto_init()
	file_ndk_nexthop_group_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ndk_sdk_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationRegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationQuerySubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ndk_sdk_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ndk_sdk_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*NotificationRegisterRequest_Intf)(nil),
		(*NotificationRegisterRequest_NwInst)(nil),
		(*NotificationRegisterRequest_LldpNeighbor)(nil),
		(*NotificationRegisterRequest_Config)(nil),
		(*NotificationRegisterRequest_BfdSession)(nil),
		(*NotificationRegisterRequest_Route)(nil),
		(*NotificationRegisterRequest_Appid)(nil),
		(*NotificationRegisterRequest_Nhg)(nil),
	}
	file_ndk_sdk_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Notification_Intf)(nil),
		(*Notification_NwInst)(nil),
		(*Notification_LldpNeighbor)(nil),
		(*Notification_Config)(nil),
		(*Notification_BfdSession)(nil),
		(*Notification_Route)(nil),
		(*Notification_Appid)(nil),
		(*Notification_Nhg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ndk_sdk_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ndk_sdk_service_proto_goTypes,
		DependencyIndexes: file_ndk_sdk_service_proto_depIdxs,
		EnumInfos:         file_ndk_sdk_service_proto_enumTypes,
		MessageInfos:      file_ndk_sdk_service_proto_msgTypes,
	}.Build()
	File_ndk_sdk_service_proto = out.File
	file_ndk_sdk_service_proto_rawDesc = nil
	file_ndk_sdk_service_proto_goTypes = nil
	file_ndk_sdk_service_proto_depIdxs = nil
}
